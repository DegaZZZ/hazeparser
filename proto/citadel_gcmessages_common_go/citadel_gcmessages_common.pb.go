// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: citadel_gcmessages_common.proto

package citadel_gcmessages_common_go

import (
	gcsdk_gcmessages_go "hazeparser/proto/gcsdk_gcmessages_go"
	steammessages_go "hazeparser/proto/steammessages_go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgLaneColor int32

const (
	CMsgLaneColor_k_ELaneColor_Invalid CMsgLaneColor = 0
	CMsgLaneColor_k_ELaneColor_Yellow  CMsgLaneColor = 1
	CMsgLaneColor_k_ELaneColor_Orange  CMsgLaneColor = 3
	CMsgLaneColor_k_ELaneColor_Blue    CMsgLaneColor = 4
	CMsgLaneColor_k_ELaneColor_Purple  CMsgLaneColor = 6
)

// Enum value maps for CMsgLaneColor.
var (
	CMsgLaneColor_name = map[int32]string{
		0: "k_ELaneColor_Invalid",
		1: "k_ELaneColor_Yellow",
		3: "k_ELaneColor_Orange",
		4: "k_ELaneColor_Blue",
		6: "k_ELaneColor_Purple",
	}
	CMsgLaneColor_value = map[string]int32{
		"k_ELaneColor_Invalid": 0,
		"k_ELaneColor_Yellow":  1,
		"k_ELaneColor_Orange":  3,
		"k_ELaneColor_Blue":    4,
		"k_ELaneColor_Purple":  6,
	}
)

func (x CMsgLaneColor) Enum() *CMsgLaneColor {
	p := new(CMsgLaneColor)
	*p = x
	return p
}

func (x CMsgLaneColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgLaneColor) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[0].Descriptor()
}

func (CMsgLaneColor) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[0]
}

func (x CMsgLaneColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgLaneColor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgLaneColor(num)
	return nil
}

// Deprecated: Use CMsgLaneColor.Descriptor instead.
func (CMsgLaneColor) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{0}
}

type EGCCitadelCommonMessages int32

const (
	EGCCitadelCommonMessages_k_EMsgAnyToGCReportAsserts         EGCCitadelCommonMessages = 7000
	EGCCitadelCommonMessages_k_EMsgAnyToGCReportAssertsResponse EGCCitadelCommonMessages = 7001
)

// Enum value maps for EGCCitadelCommonMessages.
var (
	EGCCitadelCommonMessages_name = map[int32]string{
		7000: "k_EMsgAnyToGCReportAsserts",
		7001: "k_EMsgAnyToGCReportAssertsResponse",
	}
	EGCCitadelCommonMessages_value = map[string]int32{
		"k_EMsgAnyToGCReportAsserts":         7000,
		"k_EMsgAnyToGCReportAssertsResponse": 7001,
	}
)

func (x EGCCitadelCommonMessages) Enum() *EGCCitadelCommonMessages {
	p := new(EGCCitadelCommonMessages)
	*p = x
	return p
}

func (x EGCCitadelCommonMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCCitadelCommonMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[1].Descriptor()
}

func (EGCCitadelCommonMessages) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[1]
}

func (x EGCCitadelCommonMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCCitadelCommonMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCCitadelCommonMessages(num)
	return nil
}

// Deprecated: Use EGCCitadelCommonMessages.Descriptor instead.
func (EGCCitadelCommonMessages) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{1}
}

type ECitadelMatchMode int32

const (
	ECitadelMatchMode_k_ECitadelMatchMode_Invalid      ECitadelMatchMode = 0
	ECitadelMatchMode_k_ECitadelMatchMode_Unranked     ECitadelMatchMode = 1
	ECitadelMatchMode_k_ECitadelMatchMode_PrivateLobby ECitadelMatchMode = 2
	ECitadelMatchMode_k_ECitadelMatchMode_CoopBot      ECitadelMatchMode = 3
	ECitadelMatchMode_k_ECitadelMatchMode_Ranked       ECitadelMatchMode = 4
	ECitadelMatchMode_k_ECitadelMatchMode_ServerTest   ECitadelMatchMode = 5
	ECitadelMatchMode_k_ECitadelMatchMode_Tutorial     ECitadelMatchMode = 6
)

// Enum value maps for ECitadelMatchMode.
var (
	ECitadelMatchMode_name = map[int32]string{
		0: "k_ECitadelMatchMode_Invalid",
		1: "k_ECitadelMatchMode_Unranked",
		2: "k_ECitadelMatchMode_PrivateLobby",
		3: "k_ECitadelMatchMode_CoopBot",
		4: "k_ECitadelMatchMode_Ranked",
		5: "k_ECitadelMatchMode_ServerTest",
		6: "k_ECitadelMatchMode_Tutorial",
	}
	ECitadelMatchMode_value = map[string]int32{
		"k_ECitadelMatchMode_Invalid":      0,
		"k_ECitadelMatchMode_Unranked":     1,
		"k_ECitadelMatchMode_PrivateLobby": 2,
		"k_ECitadelMatchMode_CoopBot":      3,
		"k_ECitadelMatchMode_Ranked":       4,
		"k_ECitadelMatchMode_ServerTest":   5,
		"k_ECitadelMatchMode_Tutorial":     6,
	}
)

func (x ECitadelMatchMode) Enum() *ECitadelMatchMode {
	p := new(ECitadelMatchMode)
	*p = x
	return p
}

func (x ECitadelMatchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelMatchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[2].Descriptor()
}

func (ECitadelMatchMode) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[2]
}

func (x ECitadelMatchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelMatchMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelMatchMode(num)
	return nil
}

// Deprecated: Use ECitadelMatchMode.Descriptor instead.
func (ECitadelMatchMode) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{2}
}

type ECitadelLobbyTeam int32

const (
	ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0     ECitadelLobbyTeam = 0
	ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team1     ECitadelLobbyTeam = 1
	ECitadelLobbyTeam_k_ECitadelLobbyTeam_Spectator ECitadelLobbyTeam = 16
)

// Enum value maps for ECitadelLobbyTeam.
var (
	ECitadelLobbyTeam_name = map[int32]string{
		0:  "k_ECitadelLobbyTeam_Team0",
		1:  "k_ECitadelLobbyTeam_Team1",
		16: "k_ECitadelLobbyTeam_Spectator",
	}
	ECitadelLobbyTeam_value = map[string]int32{
		"k_ECitadelLobbyTeam_Team0":     0,
		"k_ECitadelLobbyTeam_Team1":     1,
		"k_ECitadelLobbyTeam_Spectator": 16,
	}
)

func (x ECitadelLobbyTeam) Enum() *ECitadelLobbyTeam {
	p := new(ECitadelLobbyTeam)
	*p = x
	return p
}

func (x ECitadelLobbyTeam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelLobbyTeam) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[3].Descriptor()
}

func (ECitadelLobbyTeam) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[3]
}

func (x ECitadelLobbyTeam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelLobbyTeam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelLobbyTeam(num)
	return nil
}

// Deprecated: Use ECitadelLobbyTeam.Descriptor instead.
func (ECitadelLobbyTeam) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{3}
}

type ECitadelAccountStatMedal int32

const (
	ECitadelAccountStatMedal_k_eNone   ECitadelAccountStatMedal = 0
	ECitadelAccountStatMedal_k_eBronze ECitadelAccountStatMedal = 1
	ECitadelAccountStatMedal_k_eSilver ECitadelAccountStatMedal = 2
	ECitadelAccountStatMedal_k_eGold   ECitadelAccountStatMedal = 3
)

// Enum value maps for ECitadelAccountStatMedal.
var (
	ECitadelAccountStatMedal_name = map[int32]string{
		0: "k_eNone",
		1: "k_eBronze",
		2: "k_eSilver",
		3: "k_eGold",
	}
	ECitadelAccountStatMedal_value = map[string]int32{
		"k_eNone":   0,
		"k_eBronze": 1,
		"k_eSilver": 2,
		"k_eGold":   3,
	}
)

func (x ECitadelAccountStatMedal) Enum() *ECitadelAccountStatMedal {
	p := new(ECitadelAccountStatMedal)
	*p = x
	return p
}

func (x ECitadelAccountStatMedal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelAccountStatMedal) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[4].Descriptor()
}

func (ECitadelAccountStatMedal) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[4]
}

func (x ECitadelAccountStatMedal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelAccountStatMedal) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelAccountStatMedal(num)
	return nil
}

// Deprecated: Use ECitadelAccountStatMedal.Descriptor instead.
func (ECitadelAccountStatMedal) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{4}
}

type ECitadelObjective int32

const (
	ECitadelObjective_k_eCitadelObjective_Team0_Core                   ECitadelObjective = 0
	ECitadelObjective_k_eCitadelObjective_Team0_Tier1_Lane1            ECitadelObjective = 1
	ECitadelObjective_k_eCitadelObjective_Team0_Tier1_Lane2            ECitadelObjective = 2
	ECitadelObjective_k_eCitadelObjective_Team0_Tier1_Lane3            ECitadelObjective = 3
	ECitadelObjective_k_eCitadelObjective_Team0_Tier1_Lane4            ECitadelObjective = 4
	ECitadelObjective_k_eCitadelObjective_Team0_Tier2_Lane1            ECitadelObjective = 5
	ECitadelObjective_k_eCitadelObjective_Team0_Tier2_Lane2            ECitadelObjective = 6
	ECitadelObjective_k_eCitadelObjective_Team0_Tier2_Lane3            ECitadelObjective = 7
	ECitadelObjective_k_eCitadelObjective_Team0_Tier2_Lane4            ECitadelObjective = 8
	ECitadelObjective_k_eCitadelObjective_Team0_Titan                  ECitadelObjective = 9
	ECitadelObjective_k_eCitadelObjective_Team0_TitanShieldGenerator_1 ECitadelObjective = 10
	ECitadelObjective_k_eCitadelObjective_Team0_TitanShieldGenerator_2 ECitadelObjective = 11
	ECitadelObjective_k_eCitadelObjective_Team0_BarrackBoss_Lane1      ECitadelObjective = 12
	ECitadelObjective_k_eCitadelObjective_Team0_BarrackBoss_Lane2      ECitadelObjective = 13
	ECitadelObjective_k_eCitadelObjective_Team0_BarrackBoss_Lane3      ECitadelObjective = 14
	ECitadelObjective_k_eCitadelObjective_Team0_BarrackBoss_Lane4      ECitadelObjective = 15
	ECitadelObjective_k_eCitadelObjective_Team1_Core                   ECitadelObjective = 16
	ECitadelObjective_k_eCitadelObjective_Team1_Tier1_Lane1            ECitadelObjective = 17
	ECitadelObjective_k_eCitadelObjective_Team1_Tier1_Lane2            ECitadelObjective = 18
	ECitadelObjective_k_eCitadelObjective_Team1_Tier1_Lane3            ECitadelObjective = 19
	ECitadelObjective_k_eCitadelObjective_Team1_Tier1_Lane4            ECitadelObjective = 20
	ECitadelObjective_k_eCitadelObjective_Team1_Tier2_Lane1            ECitadelObjective = 21
	ECitadelObjective_k_eCitadelObjective_Team1_Tier2_Lane2            ECitadelObjective = 22
	ECitadelObjective_k_eCitadelObjective_Team1_Tier2_Lane3            ECitadelObjective = 23
	ECitadelObjective_k_eCitadelObjective_Team1_Tier2_Lane4            ECitadelObjective = 24
	ECitadelObjective_k_eCitadelObjective_Team1_Titan                  ECitadelObjective = 25
	ECitadelObjective_k_eCitadelObjective_Team1_TitanShieldGenerator_1 ECitadelObjective = 26
	ECitadelObjective_k_eCitadelObjective_Team1_TitanShieldGenerator_2 ECitadelObjective = 27
	ECitadelObjective_k_eCitadelObjective_Team1_BarrackBoss_Lane1      ECitadelObjective = 28
	ECitadelObjective_k_eCitadelObjective_Team1_BarrackBoss_Lane2      ECitadelObjective = 29
	ECitadelObjective_k_eCitadelObjective_Team1_BarrackBoss_Lane3      ECitadelObjective = 30
	ECitadelObjective_k_eCitadelObjective_Team1_BarrackBoss_Lane4      ECitadelObjective = 31
	ECitadelObjective_k_eCitadelObjective_Neutral_Mid                  ECitadelObjective = 32
)

// Enum value maps for ECitadelObjective.
var (
	ECitadelObjective_name = map[int32]string{
		0:  "k_eCitadelObjective_Team0_Core",
		1:  "k_eCitadelObjective_Team0_Tier1_Lane1",
		2:  "k_eCitadelObjective_Team0_Tier1_Lane2",
		3:  "k_eCitadelObjective_Team0_Tier1_Lane3",
		4:  "k_eCitadelObjective_Team0_Tier1_Lane4",
		5:  "k_eCitadelObjective_Team0_Tier2_Lane1",
		6:  "k_eCitadelObjective_Team0_Tier2_Lane2",
		7:  "k_eCitadelObjective_Team0_Tier2_Lane3",
		8:  "k_eCitadelObjective_Team0_Tier2_Lane4",
		9:  "k_eCitadelObjective_Team0_Titan",
		10: "k_eCitadelObjective_Team0_TitanShieldGenerator_1",
		11: "k_eCitadelObjective_Team0_TitanShieldGenerator_2",
		12: "k_eCitadelObjective_Team0_BarrackBoss_Lane1",
		13: "k_eCitadelObjective_Team0_BarrackBoss_Lane2",
		14: "k_eCitadelObjective_Team0_BarrackBoss_Lane3",
		15: "k_eCitadelObjective_Team0_BarrackBoss_Lane4",
		16: "k_eCitadelObjective_Team1_Core",
		17: "k_eCitadelObjective_Team1_Tier1_Lane1",
		18: "k_eCitadelObjective_Team1_Tier1_Lane2",
		19: "k_eCitadelObjective_Team1_Tier1_Lane3",
		20: "k_eCitadelObjective_Team1_Tier1_Lane4",
		21: "k_eCitadelObjective_Team1_Tier2_Lane1",
		22: "k_eCitadelObjective_Team1_Tier2_Lane2",
		23: "k_eCitadelObjective_Team1_Tier2_Lane3",
		24: "k_eCitadelObjective_Team1_Tier2_Lane4",
		25: "k_eCitadelObjective_Team1_Titan",
		26: "k_eCitadelObjective_Team1_TitanShieldGenerator_1",
		27: "k_eCitadelObjective_Team1_TitanShieldGenerator_2",
		28: "k_eCitadelObjective_Team1_BarrackBoss_Lane1",
		29: "k_eCitadelObjective_Team1_BarrackBoss_Lane2",
		30: "k_eCitadelObjective_Team1_BarrackBoss_Lane3",
		31: "k_eCitadelObjective_Team1_BarrackBoss_Lane4",
		32: "k_eCitadelObjective_Neutral_Mid",
	}
	ECitadelObjective_value = map[string]int32{
		"k_eCitadelObjective_Team0_Core":                   0,
		"k_eCitadelObjective_Team0_Tier1_Lane1":            1,
		"k_eCitadelObjective_Team0_Tier1_Lane2":            2,
		"k_eCitadelObjective_Team0_Tier1_Lane3":            3,
		"k_eCitadelObjective_Team0_Tier1_Lane4":            4,
		"k_eCitadelObjective_Team0_Tier2_Lane1":            5,
		"k_eCitadelObjective_Team0_Tier2_Lane2":            6,
		"k_eCitadelObjective_Team0_Tier2_Lane3":            7,
		"k_eCitadelObjective_Team0_Tier2_Lane4":            8,
		"k_eCitadelObjective_Team0_Titan":                  9,
		"k_eCitadelObjective_Team0_TitanShieldGenerator_1": 10,
		"k_eCitadelObjective_Team0_TitanShieldGenerator_2": 11,
		"k_eCitadelObjective_Team0_BarrackBoss_Lane1":      12,
		"k_eCitadelObjective_Team0_BarrackBoss_Lane2":      13,
		"k_eCitadelObjective_Team0_BarrackBoss_Lane3":      14,
		"k_eCitadelObjective_Team0_BarrackBoss_Lane4":      15,
		"k_eCitadelObjective_Team1_Core":                   16,
		"k_eCitadelObjective_Team1_Tier1_Lane1":            17,
		"k_eCitadelObjective_Team1_Tier1_Lane2":            18,
		"k_eCitadelObjective_Team1_Tier1_Lane3":            19,
		"k_eCitadelObjective_Team1_Tier1_Lane4":            20,
		"k_eCitadelObjective_Team1_Tier2_Lane1":            21,
		"k_eCitadelObjective_Team1_Tier2_Lane2":            22,
		"k_eCitadelObjective_Team1_Tier2_Lane3":            23,
		"k_eCitadelObjective_Team1_Tier2_Lane4":            24,
		"k_eCitadelObjective_Team1_Titan":                  25,
		"k_eCitadelObjective_Team1_TitanShieldGenerator_1": 26,
		"k_eCitadelObjective_Team1_TitanShieldGenerator_2": 27,
		"k_eCitadelObjective_Team1_BarrackBoss_Lane1":      28,
		"k_eCitadelObjective_Team1_BarrackBoss_Lane2":      29,
		"k_eCitadelObjective_Team1_BarrackBoss_Lane3":      30,
		"k_eCitadelObjective_Team1_BarrackBoss_Lane4":      31,
		"k_eCitadelObjective_Neutral_Mid":                  32,
	}
)

func (x ECitadelObjective) Enum() *ECitadelObjective {
	p := new(ECitadelObjective)
	*p = x
	return p
}

func (x ECitadelObjective) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelObjective) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[5].Descriptor()
}

func (ECitadelObjective) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[5]
}

func (x ECitadelObjective) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelObjective) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelObjective(num)
	return nil
}

// Deprecated: Use ECitadelObjective.Descriptor instead.
func (ECitadelObjective) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{5}
}

type ECitadelTeamObjective int32

const (
	ECitadelTeamObjective_k_eCitadelTeamObjective_Core                   ECitadelTeamObjective = 0
	ECitadelTeamObjective_k_eCitadelTeamObjective_Tier1_Lane1            ECitadelTeamObjective = 1
	ECitadelTeamObjective_k_eCitadelTeamObjective_Tier1_Lane2            ECitadelTeamObjective = 2
	ECitadelTeamObjective_k_eCitadelTeamObjective_Tier1_Lane3            ECitadelTeamObjective = 3
	ECitadelTeamObjective_k_eCitadelTeamObjective_Tier1_Lane4            ECitadelTeamObjective = 4
	ECitadelTeamObjective_k_eCitadelTeamObjective_Tier2_Lane1            ECitadelTeamObjective = 5
	ECitadelTeamObjective_k_eCitadelTeamObjective_Tier2_Lane2            ECitadelTeamObjective = 6
	ECitadelTeamObjective_k_eCitadelTeamObjective_Tier2_Lane3            ECitadelTeamObjective = 7
	ECitadelTeamObjective_k_eCitadelTeamObjective_Tier2_Lane4            ECitadelTeamObjective = 8
	ECitadelTeamObjective_k_eCitadelTeamObjective_Titan                  ECitadelTeamObjective = 9
	ECitadelTeamObjective_k_eCitadelTeamObjective_TitanShieldGenerator_1 ECitadelTeamObjective = 10
	ECitadelTeamObjective_k_eCitadelTeamObjective_TitanShieldGenerator_2 ECitadelTeamObjective = 11
	ECitadelTeamObjective_k_eCitadelTeamObjective_BarrackBoss_Lane1      ECitadelTeamObjective = 12
	ECitadelTeamObjective_k_eCitadelTeamObjective_BarrackBoss_Lane2      ECitadelTeamObjective = 13
	ECitadelTeamObjective_k_eCitadelTeamObjective_BarrackBoss_Lane3      ECitadelTeamObjective = 14
	ECitadelTeamObjective_k_eCitadelTeamObjective_BarrackBoss_Lane4      ECitadelTeamObjective = 15
)

// Enum value maps for ECitadelTeamObjective.
var (
	ECitadelTeamObjective_name = map[int32]string{
		0:  "k_eCitadelTeamObjective_Core",
		1:  "k_eCitadelTeamObjective_Tier1_Lane1",
		2:  "k_eCitadelTeamObjective_Tier1_Lane2",
		3:  "k_eCitadelTeamObjective_Tier1_Lane3",
		4:  "k_eCitadelTeamObjective_Tier1_Lane4",
		5:  "k_eCitadelTeamObjective_Tier2_Lane1",
		6:  "k_eCitadelTeamObjective_Tier2_Lane2",
		7:  "k_eCitadelTeamObjective_Tier2_Lane3",
		8:  "k_eCitadelTeamObjective_Tier2_Lane4",
		9:  "k_eCitadelTeamObjective_Titan",
		10: "k_eCitadelTeamObjective_TitanShieldGenerator_1",
		11: "k_eCitadelTeamObjective_TitanShieldGenerator_2",
		12: "k_eCitadelTeamObjective_BarrackBoss_Lane1",
		13: "k_eCitadelTeamObjective_BarrackBoss_Lane2",
		14: "k_eCitadelTeamObjective_BarrackBoss_Lane3",
		15: "k_eCitadelTeamObjective_BarrackBoss_Lane4",
	}
	ECitadelTeamObjective_value = map[string]int32{
		"k_eCitadelTeamObjective_Core":                   0,
		"k_eCitadelTeamObjective_Tier1_Lane1":            1,
		"k_eCitadelTeamObjective_Tier1_Lane2":            2,
		"k_eCitadelTeamObjective_Tier1_Lane3":            3,
		"k_eCitadelTeamObjective_Tier1_Lane4":            4,
		"k_eCitadelTeamObjective_Tier2_Lane1":            5,
		"k_eCitadelTeamObjective_Tier2_Lane2":            6,
		"k_eCitadelTeamObjective_Tier2_Lane3":            7,
		"k_eCitadelTeamObjective_Tier2_Lane4":            8,
		"k_eCitadelTeamObjective_Titan":                  9,
		"k_eCitadelTeamObjective_TitanShieldGenerator_1": 10,
		"k_eCitadelTeamObjective_TitanShieldGenerator_2": 11,
		"k_eCitadelTeamObjective_BarrackBoss_Lane1":      12,
		"k_eCitadelTeamObjective_BarrackBoss_Lane2":      13,
		"k_eCitadelTeamObjective_BarrackBoss_Lane3":      14,
		"k_eCitadelTeamObjective_BarrackBoss_Lane4":      15,
	}
)

func (x ECitadelTeamObjective) Enum() *ECitadelTeamObjective {
	p := new(ECitadelTeamObjective)
	*p = x
	return p
}

func (x ECitadelTeamObjective) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelTeamObjective) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[6].Descriptor()
}

func (ECitadelTeamObjective) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[6]
}

func (x ECitadelTeamObjective) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelTeamObjective) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelTeamObjective(num)
	return nil
}

// Deprecated: Use ECitadelTeamObjective.Descriptor instead.
func (ECitadelTeamObjective) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{6}
}

type ECitadelBotDifficulty int32

const (
	ECitadelBotDifficulty_k_ECitadelBotDifficulty_None      ECitadelBotDifficulty = 0
	ECitadelBotDifficulty_k_ECitadelBotDifficulty_Easy      ECitadelBotDifficulty = 1
	ECitadelBotDifficulty_k_ECitadelBotDifficulty_Medium    ECitadelBotDifficulty = 2
	ECitadelBotDifficulty_k_ECitadelBotDifficulty_Hard      ECitadelBotDifficulty = 3
	ECitadelBotDifficulty_k_ECitadelBotDifficulty_Nightmare ECitadelBotDifficulty = 4
	ECitadelBotDifficulty_k_ECitadelBotDifficulty_Guided    ECitadelBotDifficulty = 5
)

// Enum value maps for ECitadelBotDifficulty.
var (
	ECitadelBotDifficulty_name = map[int32]string{
		0: "k_ECitadelBotDifficulty_None",
		1: "k_ECitadelBotDifficulty_Easy",
		2: "k_ECitadelBotDifficulty_Medium",
		3: "k_ECitadelBotDifficulty_Hard",
		4: "k_ECitadelBotDifficulty_Nightmare",
		5: "k_ECitadelBotDifficulty_Guided",
	}
	ECitadelBotDifficulty_value = map[string]int32{
		"k_ECitadelBotDifficulty_None":      0,
		"k_ECitadelBotDifficulty_Easy":      1,
		"k_ECitadelBotDifficulty_Medium":    2,
		"k_ECitadelBotDifficulty_Hard":      3,
		"k_ECitadelBotDifficulty_Nightmare": 4,
		"k_ECitadelBotDifficulty_Guided":    5,
	}
)

func (x ECitadelBotDifficulty) Enum() *ECitadelBotDifficulty {
	p := new(ECitadelBotDifficulty)
	*p = x
	return p
}

func (x ECitadelBotDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelBotDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[7].Descriptor()
}

func (ECitadelBotDifficulty) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[7]
}

func (x ECitadelBotDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelBotDifficulty) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelBotDifficulty(num)
	return nil
}

// Deprecated: Use ECitadelBotDifficulty.Descriptor instead.
func (ECitadelBotDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{7}
}

type ECitadelRegionMode int32

const (
	ECitadelRegionMode_k_ECitadelRegionMode_ROW      ECitadelRegionMode = 0
	ECitadelRegionMode_k_ECitadelRegionMode_Europe   ECitadelRegionMode = 1
	ECitadelRegionMode_k_ECitadelRegionMode_SEAsia   ECitadelRegionMode = 2
	ECitadelRegionMode_k_ECitadelRegionMode_SAmerica ECitadelRegionMode = 3
	ECitadelRegionMode_k_ECitadelRegionMode_Russia   ECitadelRegionMode = 4
	ECitadelRegionMode_k_ECitadelRegionMode_Oceania  ECitadelRegionMode = 5
)

// Enum value maps for ECitadelRegionMode.
var (
	ECitadelRegionMode_name = map[int32]string{
		0: "k_ECitadelRegionMode_ROW",
		1: "k_ECitadelRegionMode_Europe",
		2: "k_ECitadelRegionMode_SEAsia",
		3: "k_ECitadelRegionMode_SAmerica",
		4: "k_ECitadelRegionMode_Russia",
		5: "k_ECitadelRegionMode_Oceania",
	}
	ECitadelRegionMode_value = map[string]int32{
		"k_ECitadelRegionMode_ROW":      0,
		"k_ECitadelRegionMode_Europe":   1,
		"k_ECitadelRegionMode_SEAsia":   2,
		"k_ECitadelRegionMode_SAmerica": 3,
		"k_ECitadelRegionMode_Russia":   4,
		"k_ECitadelRegionMode_Oceania":  5,
	}
)

func (x ECitadelRegionMode) Enum() *ECitadelRegionMode {
	p := new(ECitadelRegionMode)
	*p = x
	return p
}

func (x ECitadelRegionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelRegionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[8].Descriptor()
}

func (ECitadelRegionMode) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[8]
}

func (x ECitadelRegionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelRegionMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelRegionMode(num)
	return nil
}

// Deprecated: Use ECitadelRegionMode.Descriptor instead.
func (ECitadelRegionMode) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{8}
}

type ECitadelGameMode int32

const (
	ECitadelGameMode_k_ECitadelGameMode_Invalid ECitadelGameMode = 0
	ECitadelGameMode_k_ECitadelGameMode_Normal  ECitadelGameMode = 1
	ECitadelGameMode_k_ECitadelGameMode_1v1Test ECitadelGameMode = 2
	ECitadelGameMode_k_ECitadelGameMode_Sandbox ECitadelGameMode = 3
)

// Enum value maps for ECitadelGameMode.
var (
	ECitadelGameMode_name = map[int32]string{
		0: "k_ECitadelGameMode_Invalid",
		1: "k_ECitadelGameMode_Normal",
		2: "k_ECitadelGameMode_1v1Test",
		3: "k_ECitadelGameMode_Sandbox",
	}
	ECitadelGameMode_value = map[string]int32{
		"k_ECitadelGameMode_Invalid": 0,
		"k_ECitadelGameMode_Normal":  1,
		"k_ECitadelGameMode_1v1Test": 2,
		"k_ECitadelGameMode_Sandbox": 3,
	}
)

func (x ECitadelGameMode) Enum() *ECitadelGameMode {
	p := new(ECitadelGameMode)
	*p = x
	return p
}

func (x ECitadelGameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECitadelGameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[9].Descriptor()
}

func (ECitadelGameMode) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[9]
}

func (x ECitadelGameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECitadelGameMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECitadelGameMode(num)
	return nil
}

// Deprecated: Use ECitadelGameMode.Descriptor instead.
func (ECitadelGameMode) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{9}
}

type ELobbyServerState int32

const (
	ELobbyServerState_k_eLobbyServerState_Assign    ELobbyServerState = 0
	ELobbyServerState_k_eLobbyServerState_InGame    ELobbyServerState = 1
	ELobbyServerState_k_eLobbyServerState_PostMatch ELobbyServerState = 2
	ELobbyServerState_k_eLobbyServerState_SignedOut ELobbyServerState = 3
	ELobbyServerState_k_eLobbyServerState_Abandoned ELobbyServerState = 4
)

// Enum value maps for ELobbyServerState.
var (
	ELobbyServerState_name = map[int32]string{
		0: "k_eLobbyServerState_Assign",
		1: "k_eLobbyServerState_InGame",
		2: "k_eLobbyServerState_PostMatch",
		3: "k_eLobbyServerState_SignedOut",
		4: "k_eLobbyServerState_Abandoned",
	}
	ELobbyServerState_value = map[string]int32{
		"k_eLobbyServerState_Assign":    0,
		"k_eLobbyServerState_InGame":    1,
		"k_eLobbyServerState_PostMatch": 2,
		"k_eLobbyServerState_SignedOut": 3,
		"k_eLobbyServerState_Abandoned": 4,
	}
)

func (x ELobbyServerState) Enum() *ELobbyServerState {
	p := new(ELobbyServerState)
	*p = x
	return p
}

func (x ELobbyServerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELobbyServerState) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[10].Descriptor()
}

func (ELobbyServerState) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[10]
}

func (x ELobbyServerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELobbyServerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELobbyServerState(num)
	return nil
}

// Deprecated: Use ELobbyServerState.Descriptor instead.
func (ELobbyServerState) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10}
}

type CSOCitadelParty_EMemberRights int32

const (
	CSOCitadelParty_k_eMemberRights_Admin   CSOCitadelParty_EMemberRights = 1
	CSOCitadelParty_k_eMemberRights_Creator CSOCitadelParty_EMemberRights = 2
)

// Enum value maps for CSOCitadelParty_EMemberRights.
var (
	CSOCitadelParty_EMemberRights_name = map[int32]string{
		1: "k_eMemberRights_Admin",
		2: "k_eMemberRights_Creator",
	}
	CSOCitadelParty_EMemberRights_value = map[string]int32{
		"k_eMemberRights_Admin":   1,
		"k_eMemberRights_Creator": 2,
	}
)

func (x CSOCitadelParty_EMemberRights) Enum() *CSOCitadelParty_EMemberRights {
	p := new(CSOCitadelParty_EMemberRights)
	*p = x
	return p
}

func (x CSOCitadelParty_EMemberRights) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSOCitadelParty_EMemberRights) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[11].Descriptor()
}

func (CSOCitadelParty_EMemberRights) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[11]
}

func (x CSOCitadelParty_EMemberRights) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSOCitadelParty_EMemberRights) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSOCitadelParty_EMemberRights(num)
	return nil
}

// Deprecated: Use CSOCitadelParty_EMemberRights.Descriptor instead.
func (CSOCitadelParty_EMemberRights) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{7, 0}
}

type CSOCitadelParty_EPlayerType int32

const (
	CSOCitadelParty_k_ePlayerType_Player    CSOCitadelParty_EPlayerType = 0
	CSOCitadelParty_k_ePlayerType_Spectator CSOCitadelParty_EPlayerType = 1
)

// Enum value maps for CSOCitadelParty_EPlayerType.
var (
	CSOCitadelParty_EPlayerType_name = map[int32]string{
		0: "k_ePlayerType_Player",
		1: "k_ePlayerType_Spectator",
	}
	CSOCitadelParty_EPlayerType_value = map[string]int32{
		"k_ePlayerType_Player":    0,
		"k_ePlayerType_Spectator": 1,
	}
)

func (x CSOCitadelParty_EPlayerType) Enum() *CSOCitadelParty_EPlayerType {
	p := new(CSOCitadelParty_EPlayerType)
	*p = x
	return p
}

func (x CSOCitadelParty_EPlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSOCitadelParty_EPlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[12].Descriptor()
}

func (CSOCitadelParty_EPlayerType) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[12]
}

func (x CSOCitadelParty_EPlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSOCitadelParty_EPlayerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSOCitadelParty_EPlayerType(num)
	return nil
}

// Deprecated: Use CSOCitadelParty_EPlayerType.Descriptor instead.
func (CSOCitadelParty_EPlayerType) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{7, 1}
}

type CSOCitadelParty_EChatMode int32

const (
	CSOCitadelParty_k_eNone      CSOCitadelParty_EChatMode = 0
	CSOCitadelParty_k_ePartyChat CSOCitadelParty_EChatMode = 1
	CSOCitadelParty_k_eTeamChat  CSOCitadelParty_EChatMode = 2
)

// Enum value maps for CSOCitadelParty_EChatMode.
var (
	CSOCitadelParty_EChatMode_name = map[int32]string{
		0: "k_eNone",
		1: "k_ePartyChat",
		2: "k_eTeamChat",
	}
	CSOCitadelParty_EChatMode_value = map[string]int32{
		"k_eNone":      0,
		"k_ePartyChat": 1,
		"k_eTeamChat":  2,
	}
)

func (x CSOCitadelParty_EChatMode) Enum() *CSOCitadelParty_EChatMode {
	p := new(CSOCitadelParty_EChatMode)
	*p = x
	return p
}

func (x CSOCitadelParty_EChatMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSOCitadelParty_EChatMode) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[13].Descriptor()
}

func (CSOCitadelParty_EChatMode) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[13]
}

func (x CSOCitadelParty_EChatMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSOCitadelParty_EChatMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSOCitadelParty_EChatMode(num)
	return nil
}

// Deprecated: Use CSOCitadelParty_EChatMode.Descriptor instead.
func (CSOCitadelParty_EChatMode) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{7, 2}
}

type CMsgMatchPlayerDamageMatrix_EStatType int32

const (
	CMsgMatchPlayerDamageMatrix_k_eType_Damage        CMsgMatchPlayerDamageMatrix_EStatType = 0
	CMsgMatchPlayerDamageMatrix_k_eType_Healing       CMsgMatchPlayerDamageMatrix_EStatType = 1
	CMsgMatchPlayerDamageMatrix_k_eType_HealPrevented CMsgMatchPlayerDamageMatrix_EStatType = 2
	CMsgMatchPlayerDamageMatrix_k_eType_Mitigated     CMsgMatchPlayerDamageMatrix_EStatType = 3
	CMsgMatchPlayerDamageMatrix_k_eType_LethalDamage  CMsgMatchPlayerDamageMatrix_EStatType = 4
)

// Enum value maps for CMsgMatchPlayerDamageMatrix_EStatType.
var (
	CMsgMatchPlayerDamageMatrix_EStatType_name = map[int32]string{
		0: "k_eType_Damage",
		1: "k_eType_Healing",
		2: "k_eType_HealPrevented",
		3: "k_eType_Mitigated",
		4: "k_eType_LethalDamage",
	}
	CMsgMatchPlayerDamageMatrix_EStatType_value = map[string]int32{
		"k_eType_Damage":        0,
		"k_eType_Healing":       1,
		"k_eType_HealPrevented": 2,
		"k_eType_Mitigated":     3,
		"k_eType_LethalDamage":  4,
	}
)

func (x CMsgMatchPlayerDamageMatrix_EStatType) Enum() *CMsgMatchPlayerDamageMatrix_EStatType {
	p := new(CMsgMatchPlayerDamageMatrix_EStatType)
	*p = x
	return p
}

func (x CMsgMatchPlayerDamageMatrix_EStatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgMatchPlayerDamageMatrix_EStatType) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[14].Descriptor()
}

func (CMsgMatchPlayerDamageMatrix_EStatType) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[14]
}

func (x CMsgMatchPlayerDamageMatrix_EStatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgMatchPlayerDamageMatrix_EStatType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgMatchPlayerDamageMatrix_EStatType(num)
	return nil
}

// Deprecated: Use CMsgMatchPlayerDamageMatrix_EStatType.Descriptor instead.
func (CMsgMatchPlayerDamageMatrix_EStatType) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{9, 0}
}

type CMsgMatchMetaDataContents_EMatchOutcome int32

const (
	CMsgMatchMetaDataContents_k_eOutcome_TeamWin CMsgMatchMetaDataContents_EMatchOutcome = 0
	CMsgMatchMetaDataContents_k_eOutcome_Error   CMsgMatchMetaDataContents_EMatchOutcome = 1
)

// Enum value maps for CMsgMatchMetaDataContents_EMatchOutcome.
var (
	CMsgMatchMetaDataContents_EMatchOutcome_name = map[int32]string{
		0: "k_eOutcome_TeamWin",
		1: "k_eOutcome_Error",
	}
	CMsgMatchMetaDataContents_EMatchOutcome_value = map[string]int32{
		"k_eOutcome_TeamWin": 0,
		"k_eOutcome_Error":   1,
	}
)

func (x CMsgMatchMetaDataContents_EMatchOutcome) Enum() *CMsgMatchMetaDataContents_EMatchOutcome {
	p := new(CMsgMatchMetaDataContents_EMatchOutcome)
	*p = x
	return p
}

func (x CMsgMatchMetaDataContents_EMatchOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgMatchMetaDataContents_EMatchOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[15].Descriptor()
}

func (CMsgMatchMetaDataContents_EMatchOutcome) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[15]
}

func (x CMsgMatchMetaDataContents_EMatchOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgMatchMetaDataContents_EMatchOutcome) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgMatchMetaDataContents_EMatchOutcome(num)
	return nil
}

// Deprecated: Use CMsgMatchMetaDataContents_EMatchOutcome.Descriptor instead.
func (CMsgMatchMetaDataContents_EMatchOutcome) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 0}
}

type CMsgMatchMetaDataContents_EGoldSource int32

const (
	CMsgMatchMetaDataContents_k_ePlayers    CMsgMatchMetaDataContents_EGoldSource = 1
	CMsgMatchMetaDataContents_k_eLaneCreeps CMsgMatchMetaDataContents_EGoldSource = 2
	CMsgMatchMetaDataContents_k_eNeutrals   CMsgMatchMetaDataContents_EGoldSource = 3
	CMsgMatchMetaDataContents_k_eBosses     CMsgMatchMetaDataContents_EGoldSource = 4
	CMsgMatchMetaDataContents_k_eTreasure   CMsgMatchMetaDataContents_EGoldSource = 5
	CMsgMatchMetaDataContents_k_eAssists    CMsgMatchMetaDataContents_EGoldSource = 6
	CMsgMatchMetaDataContents_k_eDenies     CMsgMatchMetaDataContents_EGoldSource = 7
)

// Enum value maps for CMsgMatchMetaDataContents_EGoldSource.
var (
	CMsgMatchMetaDataContents_EGoldSource_name = map[int32]string{
		1: "k_ePlayers",
		2: "k_eLaneCreeps",
		3: "k_eNeutrals",
		4: "k_eBosses",
		5: "k_eTreasure",
		6: "k_eAssists",
		7: "k_eDenies",
	}
	CMsgMatchMetaDataContents_EGoldSource_value = map[string]int32{
		"k_ePlayers":    1,
		"k_eLaneCreeps": 2,
		"k_eNeutrals":   3,
		"k_eBosses":     4,
		"k_eTreasure":   5,
		"k_eAssists":    6,
		"k_eDenies":     7,
	}
)

func (x CMsgMatchMetaDataContents_EGoldSource) Enum() *CMsgMatchMetaDataContents_EGoldSource {
	p := new(CMsgMatchMetaDataContents_EGoldSource)
	*p = x
	return p
}

func (x CMsgMatchMetaDataContents_EGoldSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgMatchMetaDataContents_EGoldSource) Descriptor() protoreflect.EnumDescriptor {
	return file_citadel_gcmessages_common_proto_enumTypes[16].Descriptor()
}

func (CMsgMatchMetaDataContents_EGoldSource) Type() protoreflect.EnumType {
	return &file_citadel_gcmessages_common_proto_enumTypes[16]
}

func (x CMsgMatchMetaDataContents_EGoldSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgMatchMetaDataContents_EGoldSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgMatchMetaDataContents_EGoldSource(num)
	return nil
}

// Deprecated: Use CMsgMatchMetaDataContents_EGoldSource.Descriptor instead.
func (CMsgMatchMetaDataContents_EGoldSource) EnumDescriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 1}
}

type CSOCitadelLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId              *uint64                               `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchId              *uint64                               `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MatchMode            *ECitadelMatchMode                    `protobuf:"varint,3,opt,name=match_mode,json=matchMode,enum=ECitadelMatchMode,def=0" json:"match_mode,omitempty"`
	GameMode             *ECitadelGameMode                     `protobuf:"varint,4,opt,name=game_mode,json=gameMode,enum=ECitadelGameMode,def=0" json:"game_mode,omitempty"`
	CompatibilityVersion *uint32                               `protobuf:"varint,5,opt,name=compatibility_version,json=compatibilityVersion" json:"compatibility_version,omitempty"`
	ExtraMessages        []*gcsdk_gcmessages_go.CExtraMsgBlock `protobuf:"bytes,6,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	ServerSteamId        *uint64                               `protobuf:"fixed64,7,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	ServerState          *ELobbyServerState                    `protobuf:"varint,8,opt,name=server_state,json=serverState,enum=ELobbyServerState,def=0" json:"server_state,omitempty"`
	UdpConnectIp         *uint32                               `protobuf:"varint,9,opt,name=udp_connect_ip,json=udpConnectIp" json:"udp_connect_ip,omitempty"`
	UdpConnectPort       *uint32                               `protobuf:"varint,10,opt,name=udp_connect_port,json=udpConnectPort" json:"udp_connect_port,omitempty"`
	SdrAddress           []byte                                `protobuf:"bytes,12,opt,name=sdr_address,json=sdrAddress" json:"sdr_address,omitempty"`
	ServerVersion        *uint32                               `protobuf:"varint,13,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	SafeToAbandon        *bool                                 `protobuf:"varint,14,opt,name=safe_to_abandon,json=safeToAbandon" json:"safe_to_abandon,omitempty"`
}

// Default values for CSOCitadelLobby fields.
const (
	Default_CSOCitadelLobby_MatchMode   = ECitadelMatchMode_k_ECitadelMatchMode_Invalid
	Default_CSOCitadelLobby_GameMode    = ECitadelGameMode_k_ECitadelGameMode_Invalid
	Default_CSOCitadelLobby_ServerState = ELobbyServerState_k_eLobbyServerState_Assign
)

func (x *CSOCitadelLobby) Reset() {
	*x = CSOCitadelLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCitadelLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCitadelLobby) ProtoMessage() {}

func (x *CSOCitadelLobby) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCitadelLobby.ProtoReflect.Descriptor instead.
func (*CSOCitadelLobby) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{0}
}

func (x *CSOCitadelLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSOCitadelLobby) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSOCitadelLobby) GetMatchMode() ECitadelMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CSOCitadelLobby_MatchMode
}

func (x *CSOCitadelLobby) GetGameMode() ECitadelGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CSOCitadelLobby_GameMode
}

func (x *CSOCitadelLobby) GetCompatibilityVersion() uint32 {
	if x != nil && x.CompatibilityVersion != nil {
		return *x.CompatibilityVersion
	}
	return 0
}

func (x *CSOCitadelLobby) GetExtraMessages() []*gcsdk_gcmessages_go.CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CSOCitadelLobby) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CSOCitadelLobby) GetServerState() ELobbyServerState {
	if x != nil && x.ServerState != nil {
		return *x.ServerState
	}
	return Default_CSOCitadelLobby_ServerState
}

func (x *CSOCitadelLobby) GetUdpConnectIp() uint32 {
	if x != nil && x.UdpConnectIp != nil {
		return *x.UdpConnectIp
	}
	return 0
}

func (x *CSOCitadelLobby) GetUdpConnectPort() uint32 {
	if x != nil && x.UdpConnectPort != nil {
		return *x.UdpConnectPort
	}
	return 0
}

func (x *CSOCitadelLobby) GetSdrAddress() []byte {
	if x != nil {
		return x.SdrAddress
	}
	return nil
}

func (x *CSOCitadelLobby) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CSOCitadelLobby) GetSafeToAbandon() bool {
	if x != nil && x.SafeToAbandon != nil {
		return *x.SafeToAbandon
	}
	return false
}

type CLobbyData_PostMatchSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Surveys []*CLobbyData_PostMatchSurvey_PlayerSurvey `protobuf:"bytes,1,rep,name=surveys" json:"surveys,omitempty"`
}

func (x *CLobbyData_PostMatchSurvey) Reset() {
	*x = CLobbyData_PostMatchSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyData_PostMatchSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyData_PostMatchSurvey) ProtoMessage() {}

func (x *CLobbyData_PostMatchSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyData_PostMatchSurvey.ProtoReflect.Descriptor instead.
func (*CLobbyData_PostMatchSurvey) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{1}
}

func (x *CLobbyData_PostMatchSurvey) GetSurveys() []*CLobbyData_PostMatchSurvey_PlayerSurvey {
	if x != nil {
		return x.Surveys
	}
	return nil
}

type CMsgHeroSelectionMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroSelections []*CMsgHeroSelectionMatchInfo_Hero `protobuf:"bytes,1,rep,name=hero_selections,json=heroSelections" json:"hero_selections,omitempty"`
}

func (x *CMsgHeroSelectionMatchInfo) Reset() {
	*x = CMsgHeroSelectionMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgHeroSelectionMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroSelectionMatchInfo) ProtoMessage() {}

func (x *CMsgHeroSelectionMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroSelectionMatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgHeroSelectionMatchInfo) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgHeroSelectionMatchInfo) GetHeroSelections() []*CMsgHeroSelectionMatchInfo_Hero {
	if x != nil {
		return x.HeroSelections
	}
	return nil
}

type CMsgStartFindingMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSearchKey     *string                `protobuf:"bytes,1,opt,name=server_search_key,json=serverSearchKey" json:"server_search_key,omitempty"`
	ServerCommandString *string                `protobuf:"bytes,2,opt,name=server_command_string,json=serverCommandString" json:"server_command_string,omitempty"`
	MatchMode           *ECitadelMatchMode     `protobuf:"varint,3,opt,name=match_mode,json=matchMode,enum=ECitadelMatchMode,def=0" json:"match_mode,omitempty"`
	GameMode            *ECitadelGameMode      `protobuf:"varint,5,opt,name=game_mode,json=gameMode,enum=ECitadelGameMode,def=0" json:"game_mode,omitempty"`
	SoloMatch           *bool                  `protobuf:"varint,6,opt,name=solo_match,json=soloMatch" json:"solo_match,omitempty"`
	BotDifficulty       *ECitadelBotDifficulty `protobuf:"varint,7,opt,name=bot_difficulty,json=botDifficulty,enum=ECitadelBotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	RegionMode          *ECitadelRegionMode    `protobuf:"varint,8,opt,name=region_mode,json=regionMode,enum=ECitadelRegionMode,def=0" json:"region_mode,omitempty"`
}

// Default values for CMsgStartFindingMatchInfo fields.
const (
	Default_CMsgStartFindingMatchInfo_MatchMode     = ECitadelMatchMode_k_ECitadelMatchMode_Invalid
	Default_CMsgStartFindingMatchInfo_GameMode      = ECitadelGameMode_k_ECitadelGameMode_Invalid
	Default_CMsgStartFindingMatchInfo_BotDifficulty = ECitadelBotDifficulty_k_ECitadelBotDifficulty_None
	Default_CMsgStartFindingMatchInfo_RegionMode    = ECitadelRegionMode_k_ECitadelRegionMode_ROW
)

func (x *CMsgStartFindingMatchInfo) Reset() {
	*x = CMsgStartFindingMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStartFindingMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStartFindingMatchInfo) ProtoMessage() {}

func (x *CMsgStartFindingMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStartFindingMatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgStartFindingMatchInfo) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgStartFindingMatchInfo) GetServerSearchKey() string {
	if x != nil && x.ServerSearchKey != nil {
		return *x.ServerSearchKey
	}
	return ""
}

func (x *CMsgStartFindingMatchInfo) GetServerCommandString() string {
	if x != nil && x.ServerCommandString != nil {
		return *x.ServerCommandString
	}
	return ""
}

func (x *CMsgStartFindingMatchInfo) GetMatchMode() ECitadelMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgStartFindingMatchInfo_MatchMode
}

func (x *CMsgStartFindingMatchInfo) GetGameMode() ECitadelGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgStartFindingMatchInfo_GameMode
}

func (x *CMsgStartFindingMatchInfo) GetSoloMatch() bool {
	if x != nil && x.SoloMatch != nil {
		return *x.SoloMatch
	}
	return false
}

func (x *CMsgStartFindingMatchInfo) GetBotDifficulty() ECitadelBotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CMsgStartFindingMatchInfo_BotDifficulty
}

func (x *CMsgStartFindingMatchInfo) GetRegionMode() ECitadelRegionMode {
	if x != nil && x.RegionMode != nil {
		return *x.RegionMode
	}
	return Default_CMsgStartFindingMatchInfo_RegionMode
}

type CMsgAnyToGCReportAsserts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *uint32                                   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Asserts []*CMsgAnyToGCReportAsserts_TrackedAssert `protobuf:"bytes,2,rep,name=asserts" json:"asserts,omitempty"`
}

func (x *CMsgAnyToGCReportAsserts) Reset() {
	*x = CMsgAnyToGCReportAsserts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAnyToGCReportAsserts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAnyToGCReportAsserts) ProtoMessage() {}

func (x *CMsgAnyToGCReportAsserts) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAnyToGCReportAsserts.ProtoReflect.Descriptor instead.
func (*CMsgAnyToGCReportAsserts) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgAnyToGCReportAsserts) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgAnyToGCReportAsserts) GetAsserts() []*CMsgAnyToGCReportAsserts_TrackedAssert {
	if x != nil {
		return x.Asserts
	}
	return nil
}

type CMsgAnyToGCReportAssertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgAnyToGCReportAssertsResponse) Reset() {
	*x = CMsgAnyToGCReportAssertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAnyToGCReportAssertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAnyToGCReportAssertsResponse) ProtoMessage() {}

func (x *CMsgAnyToGCReportAssertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAnyToGCReportAssertsResponse.ProtoReflect.Descriptor instead.
func (*CMsgAnyToGCReportAssertsResponse) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgAnyToGCReportAssertsResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgRegionPingTimesClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterCodes []uint32 `protobuf:"fixed32,1,rep,packed,name=data_center_codes,json=dataCenterCodes" json:"data_center_codes,omitempty"`
	PingTimes       []uint32 `protobuf:"varint,2,rep,packed,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
}

func (x *CMsgRegionPingTimesClient) Reset() {
	*x = CMsgRegionPingTimesClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRegionPingTimesClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRegionPingTimesClient) ProtoMessage() {}

func (x *CMsgRegionPingTimesClient) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRegionPingTimesClient.ProtoReflect.Descriptor instead.
func (*CMsgRegionPingTimesClient) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgRegionPingTimesClient) GetDataCenterCodes() []uint32 {
	if x != nil {
		return x.DataCenterCodes
	}
	return nil
}

func (x *CMsgRegionPingTimesClient) GetPingTimes() []uint32 {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

type CSOCitadelParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId               *uint64                       `protobuf:"varint,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	Members               []*CSOCitadelParty_Member     `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	Invites               []*CSOCitadelParty_Invite     `protobuf:"bytes,3,rep,name=invites" json:"invites,omitempty"`
	DevServerCommand      *string                       `protobuf:"bytes,4,opt,name=dev_server_command,json=devServerCommand" json:"dev_server_command,omitempty"`
	LeftMembers           []*CSOCitadelParty_LeftMember `protobuf:"bytes,5,rep,name=left_members,json=leftMembers" json:"left_members,omitempty"`
	JoinCode              *uint64                       `protobuf:"varint,6,opt,name=join_code,json=joinCode" json:"join_code,omitempty"`
	BotDifficulty         *ECitadelBotDifficulty        `protobuf:"varint,7,opt,name=bot_difficulty,json=botDifficulty,enum=ECitadelBotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	MatchMode             *ECitadelMatchMode            `protobuf:"varint,9,opt,name=match_mode,json=matchMode,enum=ECitadelMatchMode,def=0" json:"match_mode,omitempty"`
	GameMode              *ECitadelGameMode             `protobuf:"varint,10,opt,name=game_mode,json=gameMode,enum=ECitadelGameMode,def=0" json:"game_mode,omitempty"`
	MatchMakingStartTime  *uint32                       `protobuf:"varint,11,opt,name=match_making_start_time,json=matchMakingStartTime" json:"match_making_start_time,omitempty"`
	ServerSearchKey       *string                       `protobuf:"bytes,12,opt,name=server_search_key,json=serverSearchKey" json:"server_search_key,omitempty"`
	IsHighSkillRangeParty *bool                         `protobuf:"varint,13,opt,name=is_high_skill_range_party,json=isHighSkillRangeParty" json:"is_high_skill_range_party,omitempty"`
	ChatMode              *CSOCitadelParty_EChatMode    `protobuf:"varint,14,opt,name=chat_mode,json=chatMode,enum=CSOCitadelParty_EChatMode,def=0" json:"chat_mode,omitempty"`
	RegionMode            *ECitadelRegionMode           `protobuf:"varint,15,opt,name=region_mode,json=regionMode,enum=ECitadelRegionMode,def=0" json:"region_mode,omitempty"`
}

// Default values for CSOCitadelParty fields.
const (
	Default_CSOCitadelParty_BotDifficulty = ECitadelBotDifficulty_k_ECitadelBotDifficulty_None
	Default_CSOCitadelParty_MatchMode     = ECitadelMatchMode_k_ECitadelMatchMode_Invalid
	Default_CSOCitadelParty_GameMode      = ECitadelGameMode_k_ECitadelGameMode_Invalid
	Default_CSOCitadelParty_ChatMode      = CSOCitadelParty_k_eNone
	Default_CSOCitadelParty_RegionMode    = ECitadelRegionMode_k_ECitadelRegionMode_ROW
)

func (x *CSOCitadelParty) Reset() {
	*x = CSOCitadelParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCitadelParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCitadelParty) ProtoMessage() {}

func (x *CSOCitadelParty) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCitadelParty.ProtoReflect.Descriptor instead.
func (*CSOCitadelParty) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{7}
}

func (x *CSOCitadelParty) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CSOCitadelParty) GetMembers() []*CSOCitadelParty_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSOCitadelParty) GetInvites() []*CSOCitadelParty_Invite {
	if x != nil {
		return x.Invites
	}
	return nil
}

func (x *CSOCitadelParty) GetDevServerCommand() string {
	if x != nil && x.DevServerCommand != nil {
		return *x.DevServerCommand
	}
	return ""
}

func (x *CSOCitadelParty) GetLeftMembers() []*CSOCitadelParty_LeftMember {
	if x != nil {
		return x.LeftMembers
	}
	return nil
}

func (x *CSOCitadelParty) GetJoinCode() uint64 {
	if x != nil && x.JoinCode != nil {
		return *x.JoinCode
	}
	return 0
}

func (x *CSOCitadelParty) GetBotDifficulty() ECitadelBotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CSOCitadelParty_BotDifficulty
}

func (x *CSOCitadelParty) GetMatchMode() ECitadelMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CSOCitadelParty_MatchMode
}

func (x *CSOCitadelParty) GetGameMode() ECitadelGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CSOCitadelParty_GameMode
}

func (x *CSOCitadelParty) GetMatchMakingStartTime() uint32 {
	if x != nil && x.MatchMakingStartTime != nil {
		return *x.MatchMakingStartTime
	}
	return 0
}

func (x *CSOCitadelParty) GetServerSearchKey() string {
	if x != nil && x.ServerSearchKey != nil {
		return *x.ServerSearchKey
	}
	return ""
}

func (x *CSOCitadelParty) GetIsHighSkillRangeParty() bool {
	if x != nil && x.IsHighSkillRangeParty != nil {
		return *x.IsHighSkillRangeParty
	}
	return false
}

func (x *CSOCitadelParty) GetChatMode() CSOCitadelParty_EChatMode {
	if x != nil && x.ChatMode != nil {
		return *x.ChatMode
	}
	return Default_CSOCitadelParty_ChatMode
}

func (x *CSOCitadelParty) GetRegionMode() ECitadelRegionMode {
	if x != nil && x.RegionMode != nil {
		return *x.RegionMode
	}
	return Default_CSOCitadelParty_RegionMode
}

type CMsgMatchPlayerPathsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     *uint32                          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	IntervalS   *float32                         `protobuf:"fixed32,2,opt,name=interval_s,json=intervalS" json:"interval_s,omitempty"`
	XResolution *uint32                          `protobuf:"varint,3,opt,name=x_resolution,json=xResolution" json:"x_resolution,omitempty"`
	YResolution *uint32                          `protobuf:"varint,4,opt,name=y_resolution,json=yResolution" json:"y_resolution,omitempty"`
	Paths       []*CMsgMatchPlayerPathsData_Path `protobuf:"bytes,5,rep,name=paths" json:"paths,omitempty"`
}

func (x *CMsgMatchPlayerPathsData) Reset() {
	*x = CMsgMatchPlayerPathsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchPlayerPathsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchPlayerPathsData) ProtoMessage() {}

func (x *CMsgMatchPlayerPathsData) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchPlayerPathsData.ProtoReflect.Descriptor instead.
func (*CMsgMatchPlayerPathsData) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgMatchPlayerPathsData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgMatchPlayerPathsData) GetIntervalS() float32 {
	if x != nil && x.IntervalS != nil {
		return *x.IntervalS
	}
	return 0
}

func (x *CMsgMatchPlayerPathsData) GetXResolution() uint32 {
	if x != nil && x.XResolution != nil {
		return *x.XResolution
	}
	return 0
}

func (x *CMsgMatchPlayerPathsData) GetYResolution() uint32 {
	if x != nil && x.YResolution != nil {
		return *x.YResolution
	}
	return 0
}

func (x *CMsgMatchPlayerPathsData) GetPaths() []*CMsgMatchPlayerPathsData_Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

type CMsgMatchPlayerDamageMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DamageDealers []*CMsgMatchPlayerDamageMatrix_DamageDealer `protobuf:"bytes,1,rep,name=damage_dealers,json=damageDealers" json:"damage_dealers,omitempty"`
	SampleTimeS   []uint32                                    `protobuf:"varint,2,rep,packed,name=sample_time_s,json=sampleTimeS" json:"sample_time_s,omitempty"`
	SourceDetails *CMsgMatchPlayerDamageMatrix_SourceDetails  `protobuf:"bytes,3,opt,name=source_details,json=sourceDetails" json:"source_details,omitempty"`
}

func (x *CMsgMatchPlayerDamageMatrix) Reset() {
	*x = CMsgMatchPlayerDamageMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchPlayerDamageMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchPlayerDamageMatrix) ProtoMessage() {}

func (x *CMsgMatchPlayerDamageMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchPlayerDamageMatrix.ProtoReflect.Descriptor instead.
func (*CMsgMatchPlayerDamageMatrix) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgMatchPlayerDamageMatrix) GetDamageDealers() []*CMsgMatchPlayerDamageMatrix_DamageDealer {
	if x != nil {
		return x.DamageDealers
	}
	return nil
}

func (x *CMsgMatchPlayerDamageMatrix) GetSampleTimeS() []uint32 {
	if x != nil {
		return x.SampleTimeS
	}
	return nil
}

func (x *CMsgMatchPlayerDamageMatrix) GetSourceDetails() *CMsgMatchPlayerDamageMatrix_SourceDetails {
	if x != nil {
		return x.SourceDetails
	}
	return nil
}

type CMsgMatchMetaDataContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchInfo *CMsgMatchMetaDataContents_MatchInfo `protobuf:"bytes,2,opt,name=match_info,json=matchInfo" json:"match_info,omitempty"`
}

func (x *CMsgMatchMetaDataContents) Reset() {
	*x = CMsgMatchMetaDataContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgMatchMetaDataContents) GetMatchInfo() *CMsgMatchMetaDataContents_MatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

type CMsgMatchMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	MatchDetails []byte  `protobuf:"bytes,2,opt,name=match_details,json=matchDetails" json:"match_details,omitempty"`
	MatchId      *uint64 `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgMatchMetaData) Reset() {
	*x = CMsgMatchMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaData) ProtoMessage() {}

func (x *CMsgMatchMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaData.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaData) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgMatchMetaData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgMatchMetaData) GetMatchDetails() []byte {
	if x != nil {
		return x.MatchDetails
	}
	return nil
}

func (x *CMsgMatchMetaData) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgMapLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y       *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Initial *bool  `protobuf:"varint,3,opt,name=initial" json:"initial,omitempty"`
}

func (x *CMsgMapLine) Reset() {
	*x = CMsgMapLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMapLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMapLine) ProtoMessage() {}

func (x *CMsgMapLine) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMapLine.ProtoReflect.Descriptor instead.
func (*CMsgMapLine) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgMapLine) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgMapLine) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgMapLine) GetInitial() bool {
	if x != nil && x.Initial != nil {
		return *x.Initial
	}
	return false
}

type CMsgAccountHeroStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId       *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StatId       []uint32 `protobuf:"varint,2,rep,name=stat_id,json=statId" json:"stat_id,omitempty"`
	TotalValue   []uint64 `protobuf:"varint,3,rep,name=total_value,json=totalValue" json:"total_value,omitempty"`
	MedalsBronze []uint32 `protobuf:"varint,4,rep,name=medals_bronze,json=medalsBronze" json:"medals_bronze,omitempty"`
	MedalsSilver []uint32 `protobuf:"varint,5,rep,name=medals_silver,json=medalsSilver" json:"medals_silver,omitempty"`
	MedalsGold   []uint32 `protobuf:"varint,6,rep,name=medals_gold,json=medalsGold" json:"medals_gold,omitempty"`
}

func (x *CMsgAccountHeroStats) Reset() {
	*x = CMsgAccountHeroStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAccountHeroStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAccountHeroStats) ProtoMessage() {}

func (x *CMsgAccountHeroStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAccountHeroStats.ProtoReflect.Descriptor instead.
func (*CMsgAccountHeroStats) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgAccountHeroStats) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgAccountHeroStats) GetStatId() []uint32 {
	if x != nil {
		return x.StatId
	}
	return nil
}

func (x *CMsgAccountHeroStats) GetTotalValue() []uint64 {
	if x != nil {
		return x.TotalValue
	}
	return nil
}

func (x *CMsgAccountHeroStats) GetMedalsBronze() []uint32 {
	if x != nil {
		return x.MedalsBronze
	}
	return nil
}

func (x *CMsgAccountHeroStats) GetMedalsSilver() []uint32 {
	if x != nil {
		return x.MedalsSilver
	}
	return nil
}

func (x *CMsgAccountHeroStats) GetMedalsGold() []uint32 {
	if x != nil {
		return x.MedalsGold
	}
	return nil
}

type CMsgAccountBookStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId    *uint32 `protobuf:"varint,1,opt,name=book_id,json=bookId" json:"book_id,omitempty"`
	BookXp    *uint32 `protobuf:"varint,2,opt,name=book_xp,json=bookXp" json:"book_xp,omitempty"`
	BookMaxXp *uint32 `protobuf:"varint,3,opt,name=book_max_xp,json=bookMaxXp" json:"book_max_xp,omitempty"`
}

func (x *CMsgAccountBookStats) Reset() {
	*x = CMsgAccountBookStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAccountBookStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAccountBookStats) ProtoMessage() {}

func (x *CMsgAccountBookStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAccountBookStats.ProtoReflect.Descriptor instead.
func (*CMsgAccountBookStats) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgAccountBookStats) GetBookId() uint32 {
	if x != nil && x.BookId != nil {
		return *x.BookId
	}
	return 0
}

func (x *CMsgAccountBookStats) GetBookXp() uint32 {
	if x != nil && x.BookXp != nil {
		return *x.BookXp
	}
	return 0
}

func (x *CMsgAccountBookStats) GetBookMaxXp() uint32 {
	if x != nil && x.BookMaxXp != nil {
		return *x.BookMaxXp
	}
	return 0
}

type CMsgAccountStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Stats     []*CMsgAccountHeroStats `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMsgAccountStats) Reset() {
	*x = CMsgAccountStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAccountStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAccountStats) ProtoMessage() {}

func (x *CMsgAccountStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAccountStats.ProtoReflect.Descriptor instead.
func (*CMsgAccountStats) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgAccountStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgAccountStats) GetStats() []*CMsgAccountHeroStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CLobbyData_PostMatchSurvey_PlayerSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	QuestionId *uint32 `protobuf:"varint,2,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) Reset() {
	*x = CLobbyData_PostMatchSurvey_PlayerSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyData_PostMatchSurvey_PlayerSurvey) ProtoMessage() {}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyData_PostMatchSurvey_PlayerSurvey.ProtoReflect.Descriptor instead.
func (*CLobbyData_PostMatchSurvey_PlayerSurvey) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) GetQuestionId() uint32 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

type CMsgHeroSelectionMatchInfo_Hero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId   *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Priority *uint32 `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
}

func (x *CMsgHeroSelectionMatchInfo_Hero) Reset() {
	*x = CMsgHeroSelectionMatchInfo_Hero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgHeroSelectionMatchInfo_Hero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroSelectionMatchInfo_Hero) ProtoMessage() {}

func (x *CMsgHeroSelectionMatchInfo_Hero) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroSelectionMatchInfo_Hero.ProtoReflect.Descriptor instead.
func (*CMsgHeroSelectionMatchInfo_Hero) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgHeroSelectionMatchInfo_Hero) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgHeroSelectionMatchInfo_Hero) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type CMsgAnyToGCReportAsserts_TrackedAssert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename        *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	LineNumber      *uint32 `protobuf:"varint,2,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	SampleMsg       *string `protobuf:"bytes,3,opt,name=sample_msg,json=sampleMsg" json:"sample_msg,omitempty"`
	SampleStack     *string `protobuf:"bytes,4,opt,name=sample_stack,json=sampleStack" json:"sample_stack,omitempty"`
	TimesFired      *uint32 `protobuf:"varint,5,opt,name=times_fired,json=timesFired" json:"times_fired,omitempty"`
	FunctionName    *string `protobuf:"bytes,6,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	Condition       *string `protobuf:"bytes,7,opt,name=condition" json:"condition,omitempty"`
	TotalTimesFired *uint32 `protobuf:"varint,8,opt,name=total_times_fired,json=totalTimesFired" json:"total_times_fired,omitempty"`
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) Reset() {
	*x = CMsgAnyToGCReportAsserts_TrackedAssert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAnyToGCReportAsserts_TrackedAssert) ProtoMessage() {}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAnyToGCReportAsserts_TrackedAssert.ProtoReflect.Descriptor instead.
func (*CMsgAnyToGCReportAsserts_TrackedAssert) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetLineNumber() uint32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetSampleMsg() string {
	if x != nil && x.SampleMsg != nil {
		return *x.SampleMsg
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetSampleStack() string {
	if x != nil && x.SampleStack != nil {
		return *x.SampleStack
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetTimesFired() uint32 {
	if x != nil && x.TimesFired != nil {
		return *x.TimesFired
	}
	return 0
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetCondition() string {
	if x != nil && x.Condition != nil {
		return *x.Condition
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetTotalTimesFired() uint32 {
	if x != nil && x.TotalTimesFired != nil {
		return *x.TotalTimesFired
	}
	return 0
}

type CSOCitadelParty_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            *uint32                       `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName          *string                       `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	RightsFlags          *uint32                       `protobuf:"varint,3,opt,name=rights_flags,json=rightsFlags" json:"rights_flags,omitempty"`
	IsReady              *bool                         `protobuf:"varint,4,opt,name=is_ready,json=isReady" json:"is_ready,omitempty"`
	PlayerType           *CSOCitadelParty_EPlayerType  `protobuf:"varint,5,opt,name=player_type,json=playerType,enum=CSOCitadelParty_EPlayerType,def=0" json:"player_type,omitempty"`
	CompatibilityVersion *uint32                       `protobuf:"varint,6,opt,name=compatibility_version,json=compatibilityVersion" json:"compatibility_version,omitempty"`
	Platform             *steammessages_go.EGCPlatform `protobuf:"varint,7,opt,name=platform,enum=EGCPlatform,def=0" json:"platform,omitempty"`
	Team                 *uint32                       `protobuf:"varint,8,opt,name=team" json:"team,omitempty"`
	HeroRoster           *CMsgHeroSelectionMatchInfo   `protobuf:"bytes,9,opt,name=hero_roster,json=heroRoster" json:"hero_roster,omitempty"`
	Permissions          *uint64                       `protobuf:"varint,10,opt,name=permissions" json:"permissions,omitempty"`
	NewPlayerProgress    *uint64                       `protobuf:"varint,11,opt,name=new_player_progress,json=newPlayerProgress" json:"new_player_progress,omitempty"`
	OwnedHeroes          []uint32                      `protobuf:"varint,12,rep,packed,name=owned_heroes,json=ownedHeroes" json:"owned_heroes,omitempty"`
}

// Default values for CSOCitadelParty_Member fields.
const (
	Default_CSOCitadelParty_Member_PlayerType = CSOCitadelParty_k_ePlayerType_Player
	Default_CSOCitadelParty_Member_Platform   = steammessages_go.EGCPlatform(0) // steammessages_go.EGCPlatform_k_eGCPlatform_None
)

func (x *CSOCitadelParty_Member) Reset() {
	*x = CSOCitadelParty_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCitadelParty_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCitadelParty_Member) ProtoMessage() {}

func (x *CSOCitadelParty_Member) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCitadelParty_Member.ProtoReflect.Descriptor instead.
func (*CSOCitadelParty_Member) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CSOCitadelParty_Member) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOCitadelParty_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSOCitadelParty_Member) GetRightsFlags() uint32 {
	if x != nil && x.RightsFlags != nil {
		return *x.RightsFlags
	}
	return 0
}

func (x *CSOCitadelParty_Member) GetIsReady() bool {
	if x != nil && x.IsReady != nil {
		return *x.IsReady
	}
	return false
}

func (x *CSOCitadelParty_Member) GetPlayerType() CSOCitadelParty_EPlayerType {
	if x != nil && x.PlayerType != nil {
		return *x.PlayerType
	}
	return Default_CSOCitadelParty_Member_PlayerType
}

func (x *CSOCitadelParty_Member) GetCompatibilityVersion() uint32 {
	if x != nil && x.CompatibilityVersion != nil {
		return *x.CompatibilityVersion
	}
	return 0
}

func (x *CSOCitadelParty_Member) GetPlatform() steammessages_go.EGCPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CSOCitadelParty_Member_Platform
}

func (x *CSOCitadelParty_Member) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CSOCitadelParty_Member) GetHeroRoster() *CMsgHeroSelectionMatchInfo {
	if x != nil {
		return x.HeroRoster
	}
	return nil
}

func (x *CSOCitadelParty_Member) GetPermissions() uint64 {
	if x != nil && x.Permissions != nil {
		return *x.Permissions
	}
	return 0
}

func (x *CSOCitadelParty_Member) GetNewPlayerProgress() uint64 {
	if x != nil && x.NewPlayerProgress != nil {
		return *x.NewPlayerProgress
	}
	return 0
}

func (x *CSOCitadelParty_Member) GetOwnedHeroes() []uint32 {
	if x != nil {
		return x.OwnedHeroes
	}
	return nil
}

type CSOCitadelParty_LeftMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32                      `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RightsFlags *uint32                      `protobuf:"varint,2,opt,name=rights_flags,json=rightsFlags" json:"rights_flags,omitempty"`
	PlayerType  *CSOCitadelParty_EPlayerType `protobuf:"varint,3,opt,name=player_type,json=playerType,enum=CSOCitadelParty_EPlayerType,def=0" json:"player_type,omitempty"`
}

// Default values for CSOCitadelParty_LeftMember fields.
const (
	Default_CSOCitadelParty_LeftMember_PlayerType = CSOCitadelParty_k_ePlayerType_Player
)

func (x *CSOCitadelParty_LeftMember) Reset() {
	*x = CSOCitadelParty_LeftMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCitadelParty_LeftMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCitadelParty_LeftMember) ProtoMessage() {}

func (x *CSOCitadelParty_LeftMember) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCitadelParty_LeftMember.ProtoReflect.Descriptor instead.
func (*CSOCitadelParty_LeftMember) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CSOCitadelParty_LeftMember) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOCitadelParty_LeftMember) GetRightsFlags() uint32 {
	if x != nil && x.RightsFlags != nil {
		return *x.RightsFlags
	}
	return 0
}

func (x *CSOCitadelParty_LeftMember) GetPlayerType() CSOCitadelParty_EPlayerType {
	if x != nil && x.PlayerType != nil {
		return *x.PlayerType
	}
	return Default_CSOCitadelParty_LeftMember_PlayerType
}

type CSOCitadelParty_Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName *string `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	InvitedBy   *uint32 `protobuf:"varint,3,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
}

func (x *CSOCitadelParty_Invite) Reset() {
	*x = CSOCitadelParty_Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCitadelParty_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCitadelParty_Invite) ProtoMessage() {}

func (x *CSOCitadelParty_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCitadelParty_Invite.ProtoReflect.Descriptor instead.
func (*CSOCitadelParty_Invite) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{7, 2}
}

func (x *CSOCitadelParty_Invite) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOCitadelParty_Invite) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSOCitadelParty_Invite) GetInvitedBy() uint32 {
	if x != nil && x.InvitedBy != nil {
		return *x.InvitedBy
	}
	return 0
}

type CMsgMatchPlayerPathsData_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot *uint32  `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	XMin       *float32 `protobuf:"fixed32,2,opt,name=x_min,json=xMin" json:"x_min,omitempty"`
	YMin       *float32 `protobuf:"fixed32,3,opt,name=y_min,json=yMin" json:"y_min,omitempty"`
	XMax       *float32 `protobuf:"fixed32,4,opt,name=x_max,json=xMax" json:"x_max,omitempty"`
	YMax       *float32 `protobuf:"fixed32,5,opt,name=y_max,json=yMax" json:"y_max,omitempty"`
	XPos       []uint32 `protobuf:"varint,6,rep,packed,name=x_pos,json=xPos" json:"x_pos,omitempty"`
	YPos       []uint32 `protobuf:"varint,7,rep,packed,name=y_pos,json=yPos" json:"y_pos,omitempty"`
	Alive      []bool   `protobuf:"varint,8,rep,packed,name=alive" json:"alive,omitempty"`
	Health     []uint32 `protobuf:"varint,9,rep,packed,name=health" json:"health,omitempty"`
}

func (x *CMsgMatchPlayerPathsData_Path) Reset() {
	*x = CMsgMatchPlayerPathsData_Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchPlayerPathsData_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchPlayerPathsData_Path) ProtoMessage() {}

func (x *CMsgMatchPlayerPathsData_Path) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchPlayerPathsData_Path.ProtoReflect.Descriptor instead.
func (*CMsgMatchPlayerPathsData_Path) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgMatchPlayerPathsData_Path) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgMatchPlayerPathsData_Path) GetXMin() float32 {
	if x != nil && x.XMin != nil {
		return *x.XMin
	}
	return 0
}

func (x *CMsgMatchPlayerPathsData_Path) GetYMin() float32 {
	if x != nil && x.YMin != nil {
		return *x.YMin
	}
	return 0
}

func (x *CMsgMatchPlayerPathsData_Path) GetXMax() float32 {
	if x != nil && x.XMax != nil {
		return *x.XMax
	}
	return 0
}

func (x *CMsgMatchPlayerPathsData_Path) GetYMax() float32 {
	if x != nil && x.YMax != nil {
		return *x.YMax
	}
	return 0
}

func (x *CMsgMatchPlayerPathsData_Path) GetXPos() []uint32 {
	if x != nil {
		return x.XPos
	}
	return nil
}

func (x *CMsgMatchPlayerPathsData_Path) GetYPos() []uint32 {
	if x != nil {
		return x.YPos
	}
	return nil
}

func (x *CMsgMatchPlayerPathsData_Path) GetAlive() []bool {
	if x != nil {
		return x.Alive
	}
	return nil
}

func (x *CMsgMatchPlayerPathsData_Path) GetHealth() []uint32 {
	if x != nil {
		return x.Health
	}
	return nil
}

type CMsgMatchPlayerDamageMatrix_DamageToPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPlayerSlot *uint32  `protobuf:"varint,1,opt,name=target_player_slot,json=targetPlayerSlot" json:"target_player_slot,omitempty"`
	Damage           []uint32 `protobuf:"varint,2,rep,packed,name=damage" json:"damage,omitempty"`
}

func (x *CMsgMatchPlayerDamageMatrix_DamageToPlayer) Reset() {
	*x = CMsgMatchPlayerDamageMatrix_DamageToPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchPlayerDamageMatrix_DamageToPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchPlayerDamageMatrix_DamageToPlayer) ProtoMessage() {}

func (x *CMsgMatchPlayerDamageMatrix_DamageToPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchPlayerDamageMatrix_DamageToPlayer.ProtoReflect.Descriptor instead.
func (*CMsgMatchPlayerDamageMatrix_DamageToPlayer) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CMsgMatchPlayerDamageMatrix_DamageToPlayer) GetTargetPlayerSlot() uint32 {
	if x != nil && x.TargetPlayerSlot != nil {
		return *x.TargetPlayerSlot
	}
	return 0
}

func (x *CMsgMatchPlayerDamageMatrix_DamageToPlayer) GetDamage() []uint32 {
	if x != nil {
		return x.Damage
	}
	return nil
}

type CMsgMatchPlayerDamageMatrix_DamageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DamageToPlayers    []*CMsgMatchPlayerDamageMatrix_DamageToPlayer `protobuf:"bytes,2,rep,name=damage_to_players,json=damageToPlayers" json:"damage_to_players,omitempty"`
	SourceDetailsIndex *uint32                                       `protobuf:"varint,4,opt,name=source_details_index,json=sourceDetailsIndex" json:"source_details_index,omitempty"`
}

func (x *CMsgMatchPlayerDamageMatrix_DamageSource) Reset() {
	*x = CMsgMatchPlayerDamageMatrix_DamageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchPlayerDamageMatrix_DamageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchPlayerDamageMatrix_DamageSource) ProtoMessage() {}

func (x *CMsgMatchPlayerDamageMatrix_DamageSource) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchPlayerDamageMatrix_DamageSource.ProtoReflect.Descriptor instead.
func (*CMsgMatchPlayerDamageMatrix_DamageSource) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{9, 1}
}

func (x *CMsgMatchPlayerDamageMatrix_DamageSource) GetDamageToPlayers() []*CMsgMatchPlayerDamageMatrix_DamageToPlayer {
	if x != nil {
		return x.DamageToPlayers
	}
	return nil
}

func (x *CMsgMatchPlayerDamageMatrix_DamageSource) GetSourceDetailsIndex() uint32 {
	if x != nil && x.SourceDetailsIndex != nil {
		return *x.SourceDetailsIndex
	}
	return 0
}

type CMsgMatchPlayerDamageMatrix_DamageDealer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerPlayerSlot *uint32                                     `protobuf:"varint,1,opt,name=dealer_player_slot,json=dealerPlayerSlot" json:"dealer_player_slot,omitempty"`
	DamageSources    []*CMsgMatchPlayerDamageMatrix_DamageSource `protobuf:"bytes,2,rep,name=damage_sources,json=damageSources" json:"damage_sources,omitempty"`
}

func (x *CMsgMatchPlayerDamageMatrix_DamageDealer) Reset() {
	*x = CMsgMatchPlayerDamageMatrix_DamageDealer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchPlayerDamageMatrix_DamageDealer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchPlayerDamageMatrix_DamageDealer) ProtoMessage() {}

func (x *CMsgMatchPlayerDamageMatrix_DamageDealer) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchPlayerDamageMatrix_DamageDealer.ProtoReflect.Descriptor instead.
func (*CMsgMatchPlayerDamageMatrix_DamageDealer) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{9, 2}
}

func (x *CMsgMatchPlayerDamageMatrix_DamageDealer) GetDealerPlayerSlot() uint32 {
	if x != nil && x.DealerPlayerSlot != nil {
		return *x.DealerPlayerSlot
	}
	return 0
}

func (x *CMsgMatchPlayerDamageMatrix_DamageDealer) GetDamageSources() []*CMsgMatchPlayerDamageMatrix_DamageSource {
	if x != nil {
		return x.DamageSources
	}
	return nil
}

type CMsgMatchPlayerDamageMatrix_SourceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatType   []CMsgMatchPlayerDamageMatrix_EStatType `protobuf:"varint,1,rep,packed,name=stat_type,json=statType,enum=CMsgMatchPlayerDamageMatrix_EStatType" json:"stat_type,omitempty"`
	SourceName []string                                `protobuf:"bytes,2,rep,name=source_name,json=sourceName" json:"source_name,omitempty"`
}

func (x *CMsgMatchPlayerDamageMatrix_SourceDetails) Reset() {
	*x = CMsgMatchPlayerDamageMatrix_SourceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchPlayerDamageMatrix_SourceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchPlayerDamageMatrix_SourceDetails) ProtoMessage() {}

func (x *CMsgMatchPlayerDamageMatrix_SourceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchPlayerDamageMatrix_SourceDetails.ProtoReflect.Descriptor instead.
func (*CMsgMatchPlayerDamageMatrix_SourceDetails) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{9, 3}
}

func (x *CMsgMatchPlayerDamageMatrix_SourceDetails) GetStatType() []CMsgMatchPlayerDamageMatrix_EStatType {
	if x != nil {
		return x.StatType
	}
	return nil
}

func (x *CMsgMatchPlayerDamageMatrix_SourceDetails) GetSourceName() []string {
	if x != nil {
		return x.SourceName
	}
	return nil
}

type CMsgMatchMetaDataContents_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (x *CMsgMatchMetaDataContents_Position) Reset() {
	*x = CMsgMatchMetaDataContents_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_Position) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_Position) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_Position.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_Position) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgMatchMetaDataContents_Position) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Position) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Position) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type CMsgMatchMetaDataContents_Deaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTimeS        *uint32                             `protobuf:"varint,1,opt,name=game_time_s,json=gameTimeS" json:"game_time_s,omitempty"`
	KillerPlayerSlot *uint32                             `protobuf:"varint,9,opt,name=killer_player_slot,json=killerPlayerSlot" json:"killer_player_slot,omitempty"`
	DeathPos         *CMsgMatchMetaDataContents_Position `protobuf:"bytes,10,opt,name=death_pos,json=deathPos" json:"death_pos,omitempty"`
	KillerPos        *CMsgMatchMetaDataContents_Position `protobuf:"bytes,11,opt,name=killer_pos,json=killerPos" json:"killer_pos,omitempty"`
	DeathDurationS   *uint32                             `protobuf:"varint,12,opt,name=death_duration_s,json=deathDurationS" json:"death_duration_s,omitempty"`
}

func (x *CMsgMatchMetaDataContents_Deaths) Reset() {
	*x = CMsgMatchMetaDataContents_Deaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_Deaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_Deaths) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_Deaths) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_Deaths.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_Deaths) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CMsgMatchMetaDataContents_Deaths) GetGameTimeS() uint32 {
	if x != nil && x.GameTimeS != nil {
		return *x.GameTimeS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Deaths) GetKillerPlayerSlot() uint32 {
	if x != nil && x.KillerPlayerSlot != nil {
		return *x.KillerPlayerSlot
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Deaths) GetDeathPos() *CMsgMatchMetaDataContents_Position {
	if x != nil {
		return x.DeathPos
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_Deaths) GetKillerPos() *CMsgMatchMetaDataContents_Position {
	if x != nil {
		return x.KillerPos
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_Deaths) GetDeathDurationS() uint32 {
	if x != nil && x.DeathDurationS != nil {
		return *x.DeathDurationS
	}
	return 0
}

type CMsgMatchMetaDataContents_Items struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTimeS       *uint32 `protobuf:"varint,1,opt,name=game_time_s,json=gameTimeS" json:"game_time_s,omitempty"`
	ItemId          *uint32 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	UpgradeId       *uint32 `protobuf:"varint,3,opt,name=upgrade_id,json=upgradeId" json:"upgrade_id,omitempty"`
	SoldTimeS       *uint32 `protobuf:"varint,4,opt,name=sold_time_s,json=soldTimeS" json:"sold_time_s,omitempty"`
	Flags           *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	ImbuedAbilityId *uint32 `protobuf:"varint,6,opt,name=imbued_ability_id,json=imbuedAbilityId" json:"imbued_ability_id,omitempty"`
}

func (x *CMsgMatchMetaDataContents_Items) Reset() {
	*x = CMsgMatchMetaDataContents_Items{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_Items) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_Items) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_Items) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_Items.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_Items) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 2}
}

func (x *CMsgMatchMetaDataContents_Items) GetGameTimeS() uint32 {
	if x != nil && x.GameTimeS != nil {
		return *x.GameTimeS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Items) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Items) GetUpgradeId() uint32 {
	if x != nil && x.UpgradeId != nil {
		return *x.UpgradeId
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Items) GetSoldTimeS() uint32 {
	if x != nil && x.SoldTimeS != nil {
		return *x.SoldTimeS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Items) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Items) GetImbuedAbilityId() uint32 {
	if x != nil && x.ImbuedAbilityId != nil {
		return *x.ImbuedAbilityId
	}
	return 0
}

type CMsgMatchMetaDataContents_Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingType  *uint32 `protobuf:"varint,1,opt,name=ping_type,json=pingType" json:"ping_type,omitempty"`
	PingData  *uint32 `protobuf:"varint,2,opt,name=ping_data,json=pingData" json:"ping_data,omitempty"`
	GameTimeS *uint32 `protobuf:"varint,3,opt,name=game_time_s,json=gameTimeS" json:"game_time_s,omitempty"`
}

func (x *CMsgMatchMetaDataContents_Ping) Reset() {
	*x = CMsgMatchMetaDataContents_Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_Ping) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_Ping) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_Ping.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_Ping) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 3}
}

func (x *CMsgMatchMetaDataContents_Ping) GetPingType() uint32 {
	if x != nil && x.PingType != nil {
		return *x.PingType
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Ping) GetPingData() uint32 {
	if x != nil && x.PingData != nil {
		return *x.PingData
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Ping) GetGameTimeS() uint32 {
	if x != nil && x.GameTimeS != nil {
		return *x.GameTimeS
	}
	return 0
}

type CMsgMatchMetaDataContents_GoldSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   *CMsgMatchMetaDataContents_EGoldSource `protobuf:"varint,1,opt,name=source,enum=CMsgMatchMetaDataContents_EGoldSource,def=1" json:"source,omitempty"`
	Kills    *uint32                                `protobuf:"varint,2,opt,name=kills" json:"kills,omitempty"`
	Damage   *uint32                                `protobuf:"varint,3,opt,name=damage" json:"damage,omitempty"`
	Gold     *uint32                                `protobuf:"varint,4,opt,name=gold" json:"gold,omitempty"`
	GoldOrbs *uint32                                `protobuf:"varint,5,opt,name=gold_orbs,json=goldOrbs" json:"gold_orbs,omitempty"`
}

// Default values for CMsgMatchMetaDataContents_GoldSource fields.
const (
	Default_CMsgMatchMetaDataContents_GoldSource_Source = CMsgMatchMetaDataContents_k_ePlayers
)

func (x *CMsgMatchMetaDataContents_GoldSource) Reset() {
	*x = CMsgMatchMetaDataContents_GoldSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_GoldSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_GoldSource) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_GoldSource) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_GoldSource.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_GoldSource) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 4}
}

func (x *CMsgMatchMetaDataContents_GoldSource) GetSource() CMsgMatchMetaDataContents_EGoldSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Default_CMsgMatchMetaDataContents_GoldSource_Source
}

func (x *CMsgMatchMetaDataContents_GoldSource) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_GoldSource) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_GoldSource) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_GoldSource) GetGoldOrbs() uint32 {
	if x != nil && x.GoldOrbs != nil {
		return *x.GoldOrbs
	}
	return 0
}

type CMsgMatchMetaDataContents_CustomUserStatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id   *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (x *CMsgMatchMetaDataContents_CustomUserStatInfo) Reset() {
	*x = CMsgMatchMetaDataContents_CustomUserStatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_CustomUserStatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_CustomUserStatInfo) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_CustomUserStatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_CustomUserStatInfo.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_CustomUserStatInfo) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 5}
}

func (x *CMsgMatchMetaDataContents_CustomUserStatInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgMatchMetaDataContents_CustomUserStatInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CMsgMatchMetaDataContents_CustomUserStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id    *uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (x *CMsgMatchMetaDataContents_CustomUserStat) Reset() {
	*x = CMsgMatchMetaDataContents_CustomUserStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_CustomUserStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_CustomUserStat) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_CustomUserStat) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_CustomUserStat.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_CustomUserStat) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 6}
}

func (x *CMsgMatchMetaDataContents_CustomUserStat) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_CustomUserStat) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CMsgMatchMetaDataContents_PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStampS           *uint32                                     `protobuf:"varint,1,opt,name=time_stamp_s,json=timeStampS" json:"time_stamp_s,omitempty"`
	NetWorth             *uint32                                     `protobuf:"varint,2,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	GoldPlayer           *uint32                                     `protobuf:"varint,3,opt,name=gold_player,json=goldPlayer" json:"gold_player,omitempty"`
	GoldPlayerOrbs       *uint32                                     `protobuf:"varint,4,opt,name=gold_player_orbs,json=goldPlayerOrbs" json:"gold_player_orbs,omitempty"`
	GoldLaneCreepOrbs    *uint32                                     `protobuf:"varint,5,opt,name=gold_lane_creep_orbs,json=goldLaneCreepOrbs" json:"gold_lane_creep_orbs,omitempty"`
	GoldNeutralCreepOrbs *uint32                                     `protobuf:"varint,6,opt,name=gold_neutral_creep_orbs,json=goldNeutralCreepOrbs" json:"gold_neutral_creep_orbs,omitempty"`
	GoldBoss             *uint32                                     `protobuf:"varint,7,opt,name=gold_boss,json=goldBoss" json:"gold_boss,omitempty"`
	GoldBossOrb          *uint32                                     `protobuf:"varint,8,opt,name=gold_boss_orb,json=goldBossOrb" json:"gold_boss_orb,omitempty"`
	GoldTreasure         *uint32                                     `protobuf:"varint,9,opt,name=gold_treasure,json=goldTreasure" json:"gold_treasure,omitempty"`
	GoldDenied           *uint32                                     `protobuf:"varint,10,opt,name=gold_denied,json=goldDenied" json:"gold_denied,omitempty"`
	GoldDeathLoss        *uint32                                     `protobuf:"varint,11,opt,name=gold_death_loss,json=goldDeathLoss" json:"gold_death_loss,omitempty"`
	GoldLaneCreep        *uint32                                     `protobuf:"varint,12,opt,name=gold_lane_creep,json=goldLaneCreep" json:"gold_lane_creep,omitempty"`
	GoldNeutralCreep     *uint32                                     `protobuf:"varint,13,opt,name=gold_neutral_creep,json=goldNeutralCreep" json:"gold_neutral_creep,omitempty"`
	Kills                *uint32                                     `protobuf:"varint,14,opt,name=kills" json:"kills,omitempty"`
	Deaths               *uint32                                     `protobuf:"varint,15,opt,name=deaths" json:"deaths,omitempty"`
	Assists              *uint32                                     `protobuf:"varint,16,opt,name=assists" json:"assists,omitempty"`
	CreepKills           *uint32                                     `protobuf:"varint,17,opt,name=creep_kills,json=creepKills" json:"creep_kills,omitempty"`
	NeutralKills         *uint32                                     `protobuf:"varint,18,opt,name=neutral_kills,json=neutralKills" json:"neutral_kills,omitempty"`
	PossibleCreeps       *uint32                                     `protobuf:"varint,19,opt,name=possible_creeps,json=possibleCreeps" json:"possible_creeps,omitempty"`
	CreepDamage          *uint32                                     `protobuf:"varint,20,opt,name=creep_damage,json=creepDamage" json:"creep_damage,omitempty"`
	PlayerDamage         *uint32                                     `protobuf:"varint,21,opt,name=player_damage,json=playerDamage" json:"player_damage,omitempty"`
	NeutralDamage        *uint32                                     `protobuf:"varint,22,opt,name=neutral_damage,json=neutralDamage" json:"neutral_damage,omitempty"`
	BossDamage           *uint32                                     `protobuf:"varint,23,opt,name=boss_damage,json=bossDamage" json:"boss_damage,omitempty"`
	Denies               *uint32                                     `protobuf:"varint,24,opt,name=denies" json:"denies,omitempty"`
	PlayerHealing        *uint32                                     `protobuf:"varint,25,opt,name=player_healing,json=playerHealing" json:"player_healing,omitempty"`
	AbilityPoints        *uint32                                     `protobuf:"varint,26,opt,name=ability_points,json=abilityPoints" json:"ability_points,omitempty"`
	SelfHealing          *uint32                                     `protobuf:"varint,27,opt,name=self_healing,json=selfHealing" json:"self_healing,omitempty"`
	PlayerDamageTaken    *uint32                                     `protobuf:"varint,28,opt,name=player_damage_taken,json=playerDamageTaken" json:"player_damage_taken,omitempty"`
	MaxHealth            *uint32                                     `protobuf:"varint,29,opt,name=max_health,json=maxHealth" json:"max_health,omitempty"`
	WeaponPower          *uint32                                     `protobuf:"varint,30,opt,name=weapon_power,json=weaponPower" json:"weapon_power,omitempty"`
	TechPower            *uint32                                     `protobuf:"varint,31,opt,name=tech_power,json=techPower" json:"tech_power,omitempty"`
	ShotsHit             *uint32                                     `protobuf:"varint,32,opt,name=shots_hit,json=shotsHit" json:"shots_hit,omitempty"`
	ShotsMissed          *uint32                                     `protobuf:"varint,33,opt,name=shots_missed,json=shotsMissed" json:"shots_missed,omitempty"`
	DamageAbsorbed       *uint32                                     `protobuf:"varint,34,opt,name=damage_absorbed,json=damageAbsorbed" json:"damage_absorbed,omitempty"`
	AbsorptionProvided   *uint32                                     `protobuf:"varint,35,opt,name=absorption_provided,json=absorptionProvided" json:"absorption_provided,omitempty"`
	HeroBulletsHit       *uint32                                     `protobuf:"varint,36,opt,name=hero_bullets_hit,json=heroBulletsHit" json:"hero_bullets_hit,omitempty"`
	HeroBulletsHitCrit   *uint32                                     `protobuf:"varint,37,opt,name=hero_bullets_hit_crit,json=heroBulletsHitCrit" json:"hero_bullets_hit_crit,omitempty"`
	HealPrevented        *uint32                                     `protobuf:"varint,38,opt,name=heal_prevented,json=healPrevented" json:"heal_prevented,omitempty"`
	HealLost             *uint32                                     `protobuf:"varint,39,opt,name=heal_lost,json=healLost" json:"heal_lost,omitempty"`
	GoldSources          []*CMsgMatchMetaDataContents_GoldSource     `protobuf:"bytes,40,rep,name=gold_sources,json=goldSources" json:"gold_sources,omitempty"`
	CustomUserStats      []*CMsgMatchMetaDataContents_CustomUserStat `protobuf:"bytes,41,rep,name=custom_user_stats,json=customUserStats" json:"custom_user_stats,omitempty"`
	DamageMitigated      *uint32                                     `protobuf:"varint,42,opt,name=damage_mitigated,json=damageMitigated" json:"damage_mitigated,omitempty"`
	Level                *uint32                                     `protobuf:"varint,43,opt,name=level" json:"level,omitempty"`
}

func (x *CMsgMatchMetaDataContents_PlayerStats) Reset() {
	*x = CMsgMatchMetaDataContents_PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_PlayerStats) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_PlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_PlayerStats) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 7}
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetTimeStampS() uint32 {
	if x != nil && x.TimeStampS != nil {
		return *x.TimeStampS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldPlayer() uint32 {
	if x != nil && x.GoldPlayer != nil {
		return *x.GoldPlayer
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldPlayerOrbs() uint32 {
	if x != nil && x.GoldPlayerOrbs != nil {
		return *x.GoldPlayerOrbs
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldLaneCreepOrbs() uint32 {
	if x != nil && x.GoldLaneCreepOrbs != nil {
		return *x.GoldLaneCreepOrbs
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldNeutralCreepOrbs() uint32 {
	if x != nil && x.GoldNeutralCreepOrbs != nil {
		return *x.GoldNeutralCreepOrbs
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldBoss() uint32 {
	if x != nil && x.GoldBoss != nil {
		return *x.GoldBoss
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldBossOrb() uint32 {
	if x != nil && x.GoldBossOrb != nil {
		return *x.GoldBossOrb
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldTreasure() uint32 {
	if x != nil && x.GoldTreasure != nil {
		return *x.GoldTreasure
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldDenied() uint32 {
	if x != nil && x.GoldDenied != nil {
		return *x.GoldDenied
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldDeathLoss() uint32 {
	if x != nil && x.GoldDeathLoss != nil {
		return *x.GoldDeathLoss
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldLaneCreep() uint32 {
	if x != nil && x.GoldLaneCreep != nil {
		return *x.GoldLaneCreep
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldNeutralCreep() uint32 {
	if x != nil && x.GoldNeutralCreep != nil {
		return *x.GoldNeutralCreep
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetCreepKills() uint32 {
	if x != nil && x.CreepKills != nil {
		return *x.CreepKills
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetNeutralKills() uint32 {
	if x != nil && x.NeutralKills != nil {
		return *x.NeutralKills
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetPossibleCreeps() uint32 {
	if x != nil && x.PossibleCreeps != nil {
		return *x.PossibleCreeps
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetCreepDamage() uint32 {
	if x != nil && x.CreepDamage != nil {
		return *x.CreepDamage
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetPlayerDamage() uint32 {
	if x != nil && x.PlayerDamage != nil {
		return *x.PlayerDamage
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetNeutralDamage() uint32 {
	if x != nil && x.NeutralDamage != nil {
		return *x.NeutralDamage
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetBossDamage() uint32 {
	if x != nil && x.BossDamage != nil {
		return *x.BossDamage
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetPlayerHealing() uint32 {
	if x != nil && x.PlayerHealing != nil {
		return *x.PlayerHealing
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetAbilityPoints() uint32 {
	if x != nil && x.AbilityPoints != nil {
		return *x.AbilityPoints
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetSelfHealing() uint32 {
	if x != nil && x.SelfHealing != nil {
		return *x.SelfHealing
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetPlayerDamageTaken() uint32 {
	if x != nil && x.PlayerDamageTaken != nil {
		return *x.PlayerDamageTaken
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetMaxHealth() uint32 {
	if x != nil && x.MaxHealth != nil {
		return *x.MaxHealth
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetWeaponPower() uint32 {
	if x != nil && x.WeaponPower != nil {
		return *x.WeaponPower
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetTechPower() uint32 {
	if x != nil && x.TechPower != nil {
		return *x.TechPower
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetShotsHit() uint32 {
	if x != nil && x.ShotsHit != nil {
		return *x.ShotsHit
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetShotsMissed() uint32 {
	if x != nil && x.ShotsMissed != nil {
		return *x.ShotsMissed
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetDamageAbsorbed() uint32 {
	if x != nil && x.DamageAbsorbed != nil {
		return *x.DamageAbsorbed
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetAbsorptionProvided() uint32 {
	if x != nil && x.AbsorptionProvided != nil {
		return *x.AbsorptionProvided
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetHeroBulletsHit() uint32 {
	if x != nil && x.HeroBulletsHit != nil {
		return *x.HeroBulletsHit
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetHeroBulletsHitCrit() uint32 {
	if x != nil && x.HeroBulletsHitCrit != nil {
		return *x.HeroBulletsHitCrit
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetHealPrevented() uint32 {
	if x != nil && x.HealPrevented != nil {
		return *x.HealPrevented
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetHealLost() uint32 {
	if x != nil && x.HealLost != nil {
		return *x.HealLost
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetGoldSources() []*CMsgMatchMetaDataContents_GoldSource {
	if x != nil {
		return x.GoldSources
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetCustomUserStats() []*CMsgMatchMetaDataContents_CustomUserStat {
	if x != nil {
		return x.CustomUserStats
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetDamageMitigated() uint32 {
	if x != nil && x.DamageMitigated != nil {
		return *x.DamageMitigated
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_PlayerStats) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type CMsgMatchMetaDataContents_AbilityStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId    *uint32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	AbilityValue *uint32 `protobuf:"varint,2,opt,name=ability_value,json=abilityValue" json:"ability_value,omitempty"`
}

func (x *CMsgMatchMetaDataContents_AbilityStat) Reset() {
	*x = CMsgMatchMetaDataContents_AbilityStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_AbilityStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_AbilityStat) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_AbilityStat) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_AbilityStat.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_AbilityStat) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 8}
}

func (x *CMsgMatchMetaDataContents_AbilityStat) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_AbilityStat) GetAbilityValue() uint32 {
	if x != nil && x.AbilityValue != nil {
		return *x.AbilityValue
	}
	return 0
}

type CMsgMatchMetaDataContents_BookReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId     *uint32 `protobuf:"varint,1,opt,name=book_id,json=bookId" json:"book_id,omitempty"`
	XpAmount   *uint32 `protobuf:"varint,2,opt,name=xp_amount,json=xpAmount" json:"xp_amount,omitempty"`
	StartingXp *uint32 `protobuf:"varint,3,opt,name=starting_xp,json=startingXp" json:"starting_xp,omitempty"`
}

func (x *CMsgMatchMetaDataContents_BookReward) Reset() {
	*x = CMsgMatchMetaDataContents_BookReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_BookReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_BookReward) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_BookReward) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_BookReward.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_BookReward) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 9}
}

func (x *CMsgMatchMetaDataContents_BookReward) GetBookId() uint32 {
	if x != nil && x.BookId != nil {
		return *x.BookId
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_BookReward) GetXpAmount() uint32 {
	if x != nil && x.XpAmount != nil {
		return *x.XpAmount
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_BookReward) GetStartingXp() uint32 {
	if x != nil && x.StartingXp != nil {
		return *x.StartingXp
	}
	return 0
}

type CMsgMatchMetaDataContents_Players struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         *uint32                                  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot        *uint32                                  `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	DeathDetails      []*CMsgMatchMetaDataContents_Deaths      `protobuf:"bytes,3,rep,name=death_details,json=deathDetails" json:"death_details,omitempty"`
	Items             []*CMsgMatchMetaDataContents_Items       `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	Stats             []*CMsgMatchMetaDataContents_PlayerStats `protobuf:"bytes,5,rep,name=stats" json:"stats,omitempty"`
	Team              *ECitadelLobbyTeam                       `protobuf:"varint,6,opt,name=team,enum=ECitadelLobbyTeam,def=0" json:"team,omitempty"`
	Kills             *uint32                                  `protobuf:"varint,8,opt,name=kills" json:"kills,omitempty"`
	Deaths            *uint32                                  `protobuf:"varint,9,opt,name=deaths" json:"deaths,omitempty"`
	Assists           *uint32                                  `protobuf:"varint,10,opt,name=assists" json:"assists,omitempty"`
	NetWorth          *uint32                                  `protobuf:"varint,11,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	HeroId            *uint32                                  `protobuf:"varint,12,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	LastHits          *uint32                                  `protobuf:"varint,13,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies            *uint32                                  `protobuf:"varint,14,opt,name=denies" json:"denies,omitempty"`
	AbilityPoints     *uint32                                  `protobuf:"varint,15,opt,name=ability_points,json=abilityPoints" json:"ability_points,omitempty"`
	Party             *uint32                                  `protobuf:"varint,16,opt,name=party" json:"party,omitempty"`
	AssignedLane      *uint32                                  `protobuf:"varint,17,opt,name=assigned_lane,json=assignedLane" json:"assigned_lane,omitempty"`
	Level             *uint32                                  `protobuf:"varint,18,opt,name=level" json:"level,omitempty"`
	Pings             []*CMsgMatchMetaDataContents_Ping        `protobuf:"bytes,19,rep,name=pings" json:"pings,omitempty"`
	AbilityStats      []*CMsgMatchMetaDataContents_AbilityStat `protobuf:"bytes,20,rep,name=ability_stats,json=abilityStats" json:"ability_stats,omitempty"`
	StatsTypeStat     []float32                                `protobuf:"fixed32,21,rep,packed,name=stats_type_stat,json=statsTypeStat" json:"stats_type_stat,omitempty"`
	BookRewards       []*CMsgMatchMetaDataContents_BookReward  `protobuf:"bytes,22,rep,name=book_rewards,json=bookRewards" json:"book_rewards,omitempty"`
	AbandonMatchTimeS *uint32                                  `protobuf:"varint,23,opt,name=abandon_match_time_s,json=abandonMatchTimeS" json:"abandon_match_time_s,omitempty"`
}

// Default values for CMsgMatchMetaDataContents_Players fields.
const (
	Default_CMsgMatchMetaDataContents_Players_Team = ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
)

func (x *CMsgMatchMetaDataContents_Players) Reset() {
	*x = CMsgMatchMetaDataContents_Players{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_Players) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_Players) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_Players) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_Players.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_Players) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 10}
}

func (x *CMsgMatchMetaDataContents_Players) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetDeathDetails() []*CMsgMatchMetaDataContents_Deaths {
	if x != nil {
		return x.DeathDetails
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_Players) GetItems() []*CMsgMatchMetaDataContents_Items {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_Players) GetStats() []*CMsgMatchMetaDataContents_PlayerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_Players) GetTeam() ECitadelLobbyTeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CMsgMatchMetaDataContents_Players_Team
}

func (x *CMsgMatchMetaDataContents_Players) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetAbilityPoints() uint32 {
	if x != nil && x.AbilityPoints != nil {
		return *x.AbilityPoints
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetParty() uint32 {
	if x != nil && x.Party != nil {
		return *x.Party
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetAssignedLane() uint32 {
	if x != nil && x.AssignedLane != nil {
		return *x.AssignedLane
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Players) GetPings() []*CMsgMatchMetaDataContents_Ping {
	if x != nil {
		return x.Pings
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_Players) GetAbilityStats() []*CMsgMatchMetaDataContents_AbilityStat {
	if x != nil {
		return x.AbilityStats
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_Players) GetStatsTypeStat() []float32 {
	if x != nil {
		return x.StatsTypeStat
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_Players) GetBookRewards() []*CMsgMatchMetaDataContents_BookReward {
	if x != nil {
		return x.BookRewards
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_Players) GetAbandonMatchTimeS() uint32 {
	if x != nil && x.AbandonMatchTimeS != nil {
		return *x.AbandonMatchTimeS
	}
	return 0
}

type CMsgMatchMetaDataContents_Objective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyObjectiveId     *ECitadelObjective     `protobuf:"varint,1,opt,name=legacy_objective_id,json=legacyObjectiveId,enum=ECitadelObjective,def=0" json:"legacy_objective_id,omitempty"`
	DestroyedTimeS        *uint32                `protobuf:"varint,2,opt,name=destroyed_time_s,json=destroyedTimeS" json:"destroyed_time_s,omitempty"`
	CreepDamage           *uint32                `protobuf:"varint,4,opt,name=creep_damage,json=creepDamage" json:"creep_damage,omitempty"`
	CreepDamageMitigated  *uint32                `protobuf:"varint,5,opt,name=creep_damage_mitigated,json=creepDamageMitigated" json:"creep_damage_mitigated,omitempty"`
	PlayerDamage          *uint32                `protobuf:"varint,6,opt,name=player_damage,json=playerDamage" json:"player_damage,omitempty"`
	PlayerDamageMitigated *uint32                `protobuf:"varint,7,opt,name=player_damage_mitigated,json=playerDamageMitigated" json:"player_damage_mitigated,omitempty"`
	FirstDamageTimeS      *uint32                `protobuf:"varint,8,opt,name=first_damage_time_s,json=firstDamageTimeS" json:"first_damage_time_s,omitempty"`
	TeamObjectiveId       *ECitadelTeamObjective `protobuf:"varint,9,opt,name=team_objective_id,json=teamObjectiveId,enum=ECitadelTeamObjective,def=0" json:"team_objective_id,omitempty"`
	Team                  *ECitadelLobbyTeam     `protobuf:"varint,10,opt,name=team,enum=ECitadelLobbyTeam,def=0" json:"team,omitempty"`
}

// Default values for CMsgMatchMetaDataContents_Objective fields.
const (
	Default_CMsgMatchMetaDataContents_Objective_LegacyObjectiveId = ECitadelObjective_k_eCitadelObjective_Team0_Core
	Default_CMsgMatchMetaDataContents_Objective_TeamObjectiveId   = ECitadelTeamObjective_k_eCitadelTeamObjective_Core
	Default_CMsgMatchMetaDataContents_Objective_Team              = ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
)

func (x *CMsgMatchMetaDataContents_Objective) Reset() {
	*x = CMsgMatchMetaDataContents_Objective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_Objective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_Objective) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_Objective) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_Objective.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_Objective) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 11}
}

func (x *CMsgMatchMetaDataContents_Objective) GetLegacyObjectiveId() ECitadelObjective {
	if x != nil && x.LegacyObjectiveId != nil {
		return *x.LegacyObjectiveId
	}
	return Default_CMsgMatchMetaDataContents_Objective_LegacyObjectiveId
}

func (x *CMsgMatchMetaDataContents_Objective) GetDestroyedTimeS() uint32 {
	if x != nil && x.DestroyedTimeS != nil {
		return *x.DestroyedTimeS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Objective) GetCreepDamage() uint32 {
	if x != nil && x.CreepDamage != nil {
		return *x.CreepDamage
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Objective) GetCreepDamageMitigated() uint32 {
	if x != nil && x.CreepDamageMitigated != nil {
		return *x.CreepDamageMitigated
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Objective) GetPlayerDamage() uint32 {
	if x != nil && x.PlayerDamage != nil {
		return *x.PlayerDamage
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Objective) GetPlayerDamageMitigated() uint32 {
	if x != nil && x.PlayerDamageMitigated != nil {
		return *x.PlayerDamageMitigated
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Objective) GetFirstDamageTimeS() uint32 {
	if x != nil && x.FirstDamageTimeS != nil {
		return *x.FirstDamageTimeS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Objective) GetTeamObjectiveId() ECitadelTeamObjective {
	if x != nil && x.TeamObjectiveId != nil {
		return *x.TeamObjectiveId
	}
	return Default_CMsgMatchMetaDataContents_Objective_TeamObjectiveId
}

func (x *CMsgMatchMetaDataContents_Objective) GetTeam() ECitadelLobbyTeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CMsgMatchMetaDataContents_Objective_Team
}

type CMsgMatchMetaDataContents_MidBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamKilled     *ECitadelLobbyTeam `protobuf:"varint,1,opt,name=team_killed,json=teamKilled,enum=ECitadelLobbyTeam,def=0" json:"team_killed,omitempty"`
	TeamClaimed    *ECitadelLobbyTeam `protobuf:"varint,2,opt,name=team_claimed,json=teamClaimed,enum=ECitadelLobbyTeam,def=0" json:"team_claimed,omitempty"`
	DestroyedTimeS *uint32            `protobuf:"varint,3,opt,name=destroyed_time_s,json=destroyedTimeS" json:"destroyed_time_s,omitempty"`
}

// Default values for CMsgMatchMetaDataContents_MidBoss fields.
const (
	Default_CMsgMatchMetaDataContents_MidBoss_TeamKilled  = ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
	Default_CMsgMatchMetaDataContents_MidBoss_TeamClaimed = ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
)

func (x *CMsgMatchMetaDataContents_MidBoss) Reset() {
	*x = CMsgMatchMetaDataContents_MidBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_MidBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_MidBoss) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_MidBoss) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_MidBoss.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_MidBoss) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 12}
}

func (x *CMsgMatchMetaDataContents_MidBoss) GetTeamKilled() ECitadelLobbyTeam {
	if x != nil && x.TeamKilled != nil {
		return *x.TeamKilled
	}
	return Default_CMsgMatchMetaDataContents_MidBoss_TeamKilled
}

func (x *CMsgMatchMetaDataContents_MidBoss) GetTeamClaimed() ECitadelLobbyTeam {
	if x != nil && x.TeamClaimed != nil {
		return *x.TeamClaimed
	}
	return Default_CMsgMatchMetaDataContents_MidBoss_TeamClaimed
}

func (x *CMsgMatchMetaDataContents_MidBoss) GetDestroyedTimeS() uint32 {
	if x != nil && x.DestroyedTimeS != nil {
		return *x.DestroyedTimeS
	}
	return 0
}

type CMsgMatchMetaDataContents_Pause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTimeS      *uint32 `protobuf:"varint,1,opt,name=game_time_s,json=gameTimeS" json:"game_time_s,omitempty"`
	PauseDurationS *uint32 `protobuf:"varint,2,opt,name=pause_duration_s,json=pauseDurationS" json:"pause_duration_s,omitempty"`
	PlayerSlot     *uint32 `protobuf:"varint,3,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
}

func (x *CMsgMatchMetaDataContents_Pause) Reset() {
	*x = CMsgMatchMetaDataContents_Pause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_Pause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_Pause) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_Pause) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_Pause.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_Pause) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 13}
}

func (x *CMsgMatchMetaDataContents_Pause) GetGameTimeS() uint32 {
	if x != nil && x.GameTimeS != nil {
		return *x.GameTimeS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Pause) GetPauseDurationS() uint32 {
	if x != nil && x.PauseDurationS != nil {
		return *x.PauseDurationS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_Pause) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

type CMsgMatchMetaDataContents_WatchedDeathReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTimeS  *uint32 `protobuf:"varint,1,opt,name=game_time_s,json=gameTimeS" json:"game_time_s,omitempty"`
	PlayerSlot *uint32 `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
}

func (x *CMsgMatchMetaDataContents_WatchedDeathReplay) Reset() {
	*x = CMsgMatchMetaDataContents_WatchedDeathReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_WatchedDeathReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_WatchedDeathReplay) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_WatchedDeathReplay) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_WatchedDeathReplay.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_WatchedDeathReplay) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 14}
}

func (x *CMsgMatchMetaDataContents_WatchedDeathReplay) GetGameTimeS() uint32 {
	if x != nil && x.GameTimeS != nil {
		return *x.GameTimeS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_WatchedDeathReplay) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

type CMsgMatchMetaDataContents_MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationS            *uint32                                         `protobuf:"varint,1,opt,name=duration_s,json=durationS" json:"duration_s,omitempty"`
	MatchOutcome         *CMsgMatchMetaDataContents_EMatchOutcome        `protobuf:"varint,2,opt,name=match_outcome,json=matchOutcome,enum=CMsgMatchMetaDataContents_EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	WinningTeam          *ECitadelLobbyTeam                              `protobuf:"varint,3,opt,name=winning_team,json=winningTeam,enum=ECitadelLobbyTeam,def=0" json:"winning_team,omitempty"`
	Players              []*CMsgMatchMetaDataContents_Players            `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	StartTime            *uint32                                         `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	MatchId              *uint64                                         `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LegacyObjectivesMask *uint32                                         `protobuf:"varint,8,opt,name=legacy_objectives_mask,json=legacyObjectivesMask" json:"legacy_objectives_mask,omitempty"`
	GameMode             *ECitadelGameMode                               `protobuf:"varint,9,opt,name=game_mode,json=gameMode,enum=ECitadelGameMode,def=0" json:"game_mode,omitempty"`
	MatchMode            *ECitadelMatchMode                              `protobuf:"varint,10,opt,name=match_mode,json=matchMode,enum=ECitadelMatchMode,def=0" json:"match_mode,omitempty"`
	Objectives           []*CMsgMatchMetaDataContents_Objective          `protobuf:"bytes,11,rep,name=objectives" json:"objectives,omitempty"`
	MatchPaths           *CMsgMatchPlayerPathsData                       `protobuf:"bytes,12,opt,name=match_paths,json=matchPaths" json:"match_paths,omitempty"`
	DamageMatrix         *CMsgMatchPlayerDamageMatrix                    `protobuf:"bytes,13,opt,name=damage_matrix,json=damageMatrix" json:"damage_matrix,omitempty"`
	MatchPauses          []*CMsgMatchMetaDataContents_Pause              `protobuf:"bytes,14,rep,name=match_pauses,json=matchPauses" json:"match_pauses,omitempty"`
	CustomUserStats      []*CMsgMatchMetaDataContents_CustomUserStatInfo `protobuf:"bytes,15,rep,name=custom_user_stats,json=customUserStats" json:"custom_user_stats,omitempty"`
	WatchedDeathReplays  []*CMsgMatchMetaDataContents_WatchedDeathReplay `protobuf:"bytes,16,rep,name=watched_death_replays,json=watchedDeathReplays" json:"watched_death_replays,omitempty"`
	ObjectivesMaskTeam0  *uint64                                         `protobuf:"varint,17,opt,name=objectives_mask_team0,json=objectivesMaskTeam0" json:"objectives_mask_team0,omitempty"`
	ObjectivesMaskTeam1  *uint64                                         `protobuf:"varint,18,opt,name=objectives_mask_team1,json=objectivesMaskTeam1" json:"objectives_mask_team1,omitempty"`
	MidBoss              []*CMsgMatchMetaDataContents_MidBoss            `protobuf:"bytes,19,rep,name=mid_boss,json=midBoss" json:"mid_boss,omitempty"`
}

// Default values for CMsgMatchMetaDataContents_MatchInfo fields.
const (
	Default_CMsgMatchMetaDataContents_MatchInfo_MatchOutcome = CMsgMatchMetaDataContents_k_eOutcome_TeamWin
	Default_CMsgMatchMetaDataContents_MatchInfo_WinningTeam  = ECitadelLobbyTeam_k_ECitadelLobbyTeam_Team0
	Default_CMsgMatchMetaDataContents_MatchInfo_GameMode     = ECitadelGameMode_k_ECitadelGameMode_Invalid
	Default_CMsgMatchMetaDataContents_MatchInfo_MatchMode    = ECitadelMatchMode_k_ECitadelMatchMode_Invalid
)

func (x *CMsgMatchMetaDataContents_MatchInfo) Reset() {
	*x = CMsgMatchMetaDataContents_MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citadel_gcmessages_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMetaDataContents_MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMetaDataContents_MatchInfo) ProtoMessage() {}

func (x *CMsgMatchMetaDataContents_MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_citadel_gcmessages_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMetaDataContents_MatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgMatchMetaDataContents_MatchInfo) Descriptor() ([]byte, []int) {
	return file_citadel_gcmessages_common_proto_rawDescGZIP(), []int{10, 15}
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetDurationS() uint32 {
	if x != nil && x.DurationS != nil {
		return *x.DurationS
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetMatchOutcome() CMsgMatchMetaDataContents_EMatchOutcome {
	if x != nil && x.MatchOutcome != nil {
		return *x.MatchOutcome
	}
	return Default_CMsgMatchMetaDataContents_MatchInfo_MatchOutcome
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetWinningTeam() ECitadelLobbyTeam {
	if x != nil && x.WinningTeam != nil {
		return *x.WinningTeam
	}
	return Default_CMsgMatchMetaDataContents_MatchInfo_WinningTeam
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetPlayers() []*CMsgMatchMetaDataContents_Players {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetLegacyObjectivesMask() uint32 {
	if x != nil && x.LegacyObjectivesMask != nil {
		return *x.LegacyObjectivesMask
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetGameMode() ECitadelGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgMatchMetaDataContents_MatchInfo_GameMode
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetMatchMode() ECitadelMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgMatchMetaDataContents_MatchInfo_MatchMode
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetObjectives() []*CMsgMatchMetaDataContents_Objective {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetMatchPaths() *CMsgMatchPlayerPathsData {
	if x != nil {
		return x.MatchPaths
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetDamageMatrix() *CMsgMatchPlayerDamageMatrix {
	if x != nil {
		return x.DamageMatrix
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetMatchPauses() []*CMsgMatchMetaDataContents_Pause {
	if x != nil {
		return x.MatchPauses
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetCustomUserStats() []*CMsgMatchMetaDataContents_CustomUserStatInfo {
	if x != nil {
		return x.CustomUserStats
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetWatchedDeathReplays() []*CMsgMatchMetaDataContents_WatchedDeathReplay {
	if x != nil {
		return x.WatchedDeathReplays
	}
	return nil
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetObjectivesMaskTeam0() uint64 {
	if x != nil && x.ObjectivesMaskTeam0 != nil {
		return *x.ObjectivesMaskTeam0
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetObjectivesMaskTeam1() uint64 {
	if x != nil && x.ObjectivesMaskTeam1 != nil {
		return *x.ObjectivesMaskTeam1
	}
	return 0
}

func (x *CMsgMatchMetaDataContents_MatchInfo) GetMidBoss() []*CMsgMatchMetaDataContents_MidBoss {
	if x != nil {
		return x.MidBoss
	}
	return nil
}

var File_citadel_gcmessages_common_proto protoreflect.FileDescriptor

var file_citadel_gcmessages_common_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x63,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b,
	0x05, 0x0a, 0x0f, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x45,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x43,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1a,
	0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x45, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x64,
	0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x64, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x73, 0x64, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x61, 0x66, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a,
	0x1a, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x07, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x07, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x1a,
	0x4e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xa4, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49,
	0x0a, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x65,
	0x72, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x04, 0x48, 0x65, 0x72,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xe3, 0x03, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1b, 0x6b, 0x5f,
	0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45, 0x43,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x5b, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a,
	0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x62,
	0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x4f, 0x57,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x03, 0x0a,
	0x18, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f,
	0x47, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x1a, 0x9e, 0x02, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x46, 0x69, 0x72, 0x65, 0x64, 0x22, 0x3c, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x41,
	0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6e, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xc0, 0x0e, 0x0a, 0x0f, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x53, 0x4f, 0x43, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65,
	0x76, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x65, 0x66,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6a, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x43,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x07, 0x6b, 0x5f, 0x65, 0x4e,
	0x6f, 0x6e, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x4f,
	0x57, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x9b, 0x04,
	0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x6b, 0x5f, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x45, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x3a, 0x12, 0x6b, 0x5f, 0x65, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x48, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65,
	0x72, 0x6f, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x0a,
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x53, 0x4f, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x14, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x69, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x47, 0x0a, 0x0d,
	0x45, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x10, 0x02, 0x22, 0x44, 0x0a, 0x0b, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x3b, 0x0a, 0x09, 0x45,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x5f, 0x65, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x10, 0x02, 0x22, 0xb5, 0x03, 0x0a, 0x18, 0x43, 0x4d, 0x73,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x12, 0x21,
	0x0a, 0x0c, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x1a, 0xe3, 0x01, 0x0a, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x78, 0x4d, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x13,
	0x0a, 0x05, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x78,
	0x4d, 0x61, 0x78, 0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x17, 0x0a, 0x05, 0x78, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x78, 0x50, 0x6f,
	0x73, 0x12, 0x17, 0x0a, 0x05, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x79, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x08, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x22, 0xf1, 0x06, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x12, 0x50, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x52, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x5a, 0x0a,
	0x0e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a,
	0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x0c, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x8e, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x79, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x2e, 0x45, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x80, 0x01, 0x0a, 0x09, 0x45, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x74, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x10, 0x04, 0x22, 0xf7, 0x2f, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x34, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x1a, 0x86, 0x02,
	0x0a, 0x06, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x50, 0x6f, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x61, 0x74, 0x68, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x1a, 0xc1, 0x01, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x6d, 0x62, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6d, 0x62, 0x75, 0x65,
	0x64, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x1a, 0x60, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x1a, 0xb7, 0x01, 0x0a,
	0x0a, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x3a, 0x0a, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6c,
	0x64, 0x5f, 0x6f, 0x72, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x6f,
	0x6c, 0x64, 0x4f, 0x72, 0x62, 0x73, 0x1a, 0x38, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x36, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x82, 0x0d, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f,
	0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72,
	0x62, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x6f, 0x72, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x67, 0x6f, 0x6c, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x65, 0x70, 0x4f,
	0x72, 0x62, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x6f, 0x72, 0x62, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x67, 0x6f, 0x6c, 0x64, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x43, 0x72, 0x65, 0x65, 0x70, 0x4f, 0x72, 0x62, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f,
	0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x6f, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x5f,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x67, 0x6f, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x62, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64,
	0x44, 0x65, 0x61, 0x74, 0x68, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f, 0x6c,
	0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x65,
	0x70, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67,
	0x6f, 0x6c, 0x64, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x65, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x65, 0x70,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x65, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x65, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x65, 0x70, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6f, 0x73, 0x73,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x48, 0x69, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x72,
	0x62, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x41, 0x62, 0x73, 0x6f, 0x72, 0x62, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x62, 0x73,
	0x6f, 0x72, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x62, 0x73, 0x6f, 0x72, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x48, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x75, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x68, 0x65, 0x72, 0x6f, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x48, 0x69, 0x74, 0x43, 0x72, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x68, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x68, 0x65, 0x61, 0x6c, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x67,
	0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x6f,
	0x6c, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x51, 0x0a,
	0x0b, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x63, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x78, 0x70, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x78, 0x70, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x58, 0x70, 0x1a, 0xa0, 0x07, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x41, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x3a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6c,
	0x61, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a,
	0x05, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x48, 0x0a,
	0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x1a, 0xa3, 0x04, 0x0a, 0x09, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x1e, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61,
	0x6d, 0x30, 0x5f, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x65,
	0x70, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x65, 0x70,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x72, 0x65, 0x65, 0x70, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x60, 0x0a, 0x11, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x1c, 0x6b, 0x5f,
	0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x45, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x19, 0x6b,
	0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x1a, 0xd5,
	0x01, 0x0a, 0x07, 0x4d, 0x69, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x3a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52, 0x0a,
	0x74, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x3a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52,
	0x0b, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x1a, 0x72, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x55, 0x0a, 0x12, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x1a, 0x98, 0x09, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x12, 0x61,
	0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x3a,
	0x12, 0x6b, 0x5f, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x57, 0x69, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x50, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x19, 0x6b, 0x5f, 0x45,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x4a, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x13, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x30, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x4d, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x3d, 0x0a,
	0x08, 0x6d, 0x69, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x64, 0x42,
	0x6f, 0x73, 0x73, 0x52, 0x07, 0x6d, 0x69, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x0d,
	0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x5f, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x57, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0b,
	0x45, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6b,
	0x5f, 0x65, 0x4c, 0x61, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x65, 0x70, 0x73, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x6b, 0x5f, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x6b, 0x5f, 0x65, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x10, 0x07, 0x22, 0x6d,
	0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x43, 0x0a,
	0x0b, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x73, 0x5f, 0x62, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x73, 0x42, 0x72, 0x6f,
	0x6e, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x73, 0x5f, 0x73, 0x69,
	0x6c, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x73, 0x53, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x65, 0x64, 0x61, 0x6c, 0x73, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x68, 0x0a, 0x14, 0x43, 0x4d, 0x73,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f,
	0x6f, 0x6b, 0x5f, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f, 0x6f,
	0x6b, 0x58, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x4d, 0x61,
	0x78, 0x58, 0x70, 0x22, 0x5e, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2a, 0x8b, 0x01, 0x0a, 0x0d, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x61, 0x6e, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4c,
	0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4c,
	0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x50, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x10,
	0x06, 0x2a, 0x64, 0x0a, 0x18, 0x45, 0x47, 0x43, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x10, 0xd8, 0x36, 0x12, 0x27,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd9, 0x36, 0x2a, 0x83, 0x02, 0x0a, 0x11, 0x45, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f,
	0x6f, 0x70, 0x42, 0x6f, 0x74, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x43, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x06, 0x2a, 0x74, 0x0a,
	0x11, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f,
	0x72, 0x10, 0x10, 0x2a, 0x52, 0x0a, 0x18, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12,
	0x0b, 0x0a, 0x07, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x6b, 0x5f, 0x65, 0x42, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x6b,
	0x5f, 0x65, 0x53, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x5f,
	0x65, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x03, 0x2a, 0xda, 0x0b, 0x0a, 0x11, 0x45, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x43, 0x6f, 0x72, 0x65, 0x10,
	0x00, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x54,
	0x69, 0x65, 0x72, 0x31, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x31, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25,
	0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x31, 0x5f,
	0x4c, 0x61, 0x6e, 0x65, 0x32, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54,
	0x65, 0x61, 0x6d, 0x30, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x31, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x33,
	0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f,
	0x54, 0x69, 0x65, 0x72, 0x31, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x34, 0x10, 0x04, 0x12, 0x29, 0x0a,
	0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x32,
	0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x31, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x32, 0x5f, 0x4c, 0x61, 0x6e, 0x65,
	0x32, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30,
	0x5f, 0x54, 0x69, 0x65, 0x72, 0x32, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x33, 0x10, 0x07, 0x12, 0x29,
	0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x54, 0x69, 0x65, 0x72,
	0x32, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x34, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x65,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x10, 0x09, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x54, 0x69, 0x74, 0x61,
	0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x31, 0x10, 0x0a, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x30, 0x5f, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x32, 0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f,
	0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x42,
	0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x31, 0x10, 0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x6b,
	0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b,
	0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x32, 0x10, 0x0d, 0x12, 0x2f, 0x0a, 0x2b,
	0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63,
	0x6b, 0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x33, 0x10, 0x0e, 0x12, 0x2f, 0x0a,
	0x2b, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x5f, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x34, 0x10, 0x0f, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x43, 0x6f, 0x72, 0x65,
	0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f,
	0x54, 0x69, 0x65, 0x72, 0x31, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x31, 0x10, 0x11, 0x12, 0x29, 0x0a,
	0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x31,
	0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x32, 0x10, 0x12, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x31, 0x5f, 0x4c, 0x61, 0x6e, 0x65,
	0x33, 0x10, 0x13, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31,
	0x5f, 0x54, 0x69, 0x65, 0x72, 0x31, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x34, 0x10, 0x14, 0x12, 0x29,
	0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x54, 0x69, 0x65, 0x72,
	0x32, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x31, 0x10, 0x15, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x32, 0x5f, 0x4c, 0x61, 0x6e,
	0x65, 0x32, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x31, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x32, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x33, 0x10, 0x17, 0x12,
	0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x54, 0x69, 0x65,
	0x72, 0x32, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x34, 0x10, 0x18, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x10, 0x19, 0x12,
	0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x54, 0x69, 0x74,
	0x61, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x31, 0x10, 0x1a, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61,
	0x6d, 0x31, 0x5f, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x32, 0x10, 0x1b, 0x12, 0x2f, 0x0a, 0x2b, 0x6b,
	0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b,
	0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x31, 0x10, 0x1c, 0x12, 0x2f, 0x0a, 0x2b,
	0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63,
	0x6b, 0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x32, 0x10, 0x1d, 0x12, 0x2f, 0x0a,
	0x2b, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x33, 0x10, 0x1e, 0x12, 0x2f,
	0x0a, 0x2b, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x42, 0x61, 0x72, 0x72,
	0x61, 0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x34, 0x10, 0x1f, 0x12,
	0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x4d,
	0x69, 0x64, 0x10, 0x20, 0x2a, 0xc8, 0x05, 0x0a, 0x15, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43, 0x6f, 0x72, 0x65, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x69, 0x65, 0x72,
	0x31, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x31, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x65,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x31, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x32,
	0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x69,
	0x65, 0x72, 0x31, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x33, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x6b,
	0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x31, 0x5f, 0x4c, 0x61, 0x6e,
	0x65, 0x34, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x54, 0x69, 0x65, 0x72, 0x32, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x31, 0x10, 0x05, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x32, 0x5f, 0x4c,
	0x61, 0x6e, 0x65, 0x32, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x32, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x33, 0x10, 0x07, 0x12,
	0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x69, 0x65, 0x72, 0x32,
	0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x34, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x43,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x10, 0x09, 0x12, 0x32, 0x0a, 0x2e, 0x6b,
	0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x53, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x31, 0x10, 0x0a, 0x12,
	0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x69, 0x74, 0x61, 0x6e,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x32, 0x10, 0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x42,
	0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x31,
	0x10, 0x0c, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x42, 0x61,
	0x72, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x32, 0x10,
	0x0d, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x42, 0x61, 0x72,
	0x72, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x33, 0x10, 0x0e,
	0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x65, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x42, 0x61, 0x72, 0x72,
	0x61, 0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x34, 0x10, 0x0f, 0x2a,
	0xec, 0x01, 0x0a, 0x15, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x45, 0x61, 0x73, 0x79, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x42,
	0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x48, 0x61, 0x72,
	0x64, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4e,
	0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x72, 0x65, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x64, 0x10, 0x05, 0x2a, 0xda,
	0x01, 0x0a, 0x12, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x4f,
	0x57, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x75, 0x72, 0x6f,
	0x70, 0x65, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x45, 0x41,
	0x73, 0x69, 0x61, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x41,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x69, 0x61, 0x10, 0x05, 0x2a, 0x91, 0x01, 0x0a, 0x10,
	0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x31, 0x76, 0x31, 0x54, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x43, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x10, 0x03, 0x2a,
	0xbc, 0x01, 0x0a, 0x11, 0x45, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x04, 0x42, 0x25,
	0x5a, 0x23, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x67, 0x6f,
}

var (
	file_citadel_gcmessages_common_proto_rawDescOnce sync.Once
	file_citadel_gcmessages_common_proto_rawDescData = file_citadel_gcmessages_common_proto_rawDesc
)

func file_citadel_gcmessages_common_proto_rawDescGZIP() []byte {
	file_citadel_gcmessages_common_proto_rawDescOnce.Do(func() {
		file_citadel_gcmessages_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_citadel_gcmessages_common_proto_rawDescData)
	})
	return file_citadel_gcmessages_common_proto_rawDescData
}

var file_citadel_gcmessages_common_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_citadel_gcmessages_common_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_citadel_gcmessages_common_proto_goTypes = []any{
	(CMsgLaneColor)(0),                                   // 0: CMsgLaneColor
	(EGCCitadelCommonMessages)(0),                        // 1: EGCCitadelCommonMessages
	(ECitadelMatchMode)(0),                               // 2: ECitadelMatchMode
	(ECitadelLobbyTeam)(0),                               // 3: ECitadelLobbyTeam
	(ECitadelAccountStatMedal)(0),                        // 4: ECitadelAccountStatMedal
	(ECitadelObjective)(0),                               // 5: ECitadelObjective
	(ECitadelTeamObjective)(0),                           // 6: ECitadelTeamObjective
	(ECitadelBotDifficulty)(0),                           // 7: ECitadelBotDifficulty
	(ECitadelRegionMode)(0),                              // 8: ECitadelRegionMode
	(ECitadelGameMode)(0),                                // 9: ECitadelGameMode
	(ELobbyServerState)(0),                               // 10: ELobbyServerState
	(CSOCitadelParty_EMemberRights)(0),                   // 11: CSOCitadelParty.EMemberRights
	(CSOCitadelParty_EPlayerType)(0),                     // 12: CSOCitadelParty.EPlayerType
	(CSOCitadelParty_EChatMode)(0),                       // 13: CSOCitadelParty.EChatMode
	(CMsgMatchPlayerDamageMatrix_EStatType)(0),           // 14: CMsgMatchPlayerDamageMatrix.EStatType
	(CMsgMatchMetaDataContents_EMatchOutcome)(0),         // 15: CMsgMatchMetaDataContents.EMatchOutcome
	(CMsgMatchMetaDataContents_EGoldSource)(0),           // 16: CMsgMatchMetaDataContents.EGoldSource
	(*CSOCitadelLobby)(nil),                              // 17: CSOCitadelLobby
	(*CLobbyData_PostMatchSurvey)(nil),                   // 18: CLobbyData_PostMatchSurvey
	(*CMsgHeroSelectionMatchInfo)(nil),                   // 19: CMsgHeroSelectionMatchInfo
	(*CMsgStartFindingMatchInfo)(nil),                    // 20: CMsgStartFindingMatchInfo
	(*CMsgAnyToGCReportAsserts)(nil),                     // 21: CMsgAnyToGCReportAsserts
	(*CMsgAnyToGCReportAssertsResponse)(nil),             // 22: CMsgAnyToGCReportAssertsResponse
	(*CMsgRegionPingTimesClient)(nil),                    // 23: CMsgRegionPingTimesClient
	(*CSOCitadelParty)(nil),                              // 24: CSOCitadelParty
	(*CMsgMatchPlayerPathsData)(nil),                     // 25: CMsgMatchPlayerPathsData
	(*CMsgMatchPlayerDamageMatrix)(nil),                  // 26: CMsgMatchPlayerDamageMatrix
	(*CMsgMatchMetaDataContents)(nil),                    // 27: CMsgMatchMetaDataContents
	(*CMsgMatchMetaData)(nil),                            // 28: CMsgMatchMetaData
	(*CMsgMapLine)(nil),                                  // 29: CMsgMapLine
	(*CMsgAccountHeroStats)(nil),                         // 30: CMsgAccountHeroStats
	(*CMsgAccountBookStats)(nil),                         // 31: CMsgAccountBookStats
	(*CMsgAccountStats)(nil),                             // 32: CMsgAccountStats
	(*CLobbyData_PostMatchSurvey_PlayerSurvey)(nil),      // 33: CLobbyData_PostMatchSurvey.PlayerSurvey
	(*CMsgHeroSelectionMatchInfo_Hero)(nil),              // 34: CMsgHeroSelectionMatchInfo.Hero
	(*CMsgAnyToGCReportAsserts_TrackedAssert)(nil),       // 35: CMsgAnyToGCReportAsserts.TrackedAssert
	(*CSOCitadelParty_Member)(nil),                       // 36: CSOCitadelParty.Member
	(*CSOCitadelParty_LeftMember)(nil),                   // 37: CSOCitadelParty.LeftMember
	(*CSOCitadelParty_Invite)(nil),                       // 38: CSOCitadelParty.Invite
	(*CMsgMatchPlayerPathsData_Path)(nil),                // 39: CMsgMatchPlayerPathsData.Path
	(*CMsgMatchPlayerDamageMatrix_DamageToPlayer)(nil),   // 40: CMsgMatchPlayerDamageMatrix.DamageToPlayer
	(*CMsgMatchPlayerDamageMatrix_DamageSource)(nil),     // 41: CMsgMatchPlayerDamageMatrix.DamageSource
	(*CMsgMatchPlayerDamageMatrix_DamageDealer)(nil),     // 42: CMsgMatchPlayerDamageMatrix.DamageDealer
	(*CMsgMatchPlayerDamageMatrix_SourceDetails)(nil),    // 43: CMsgMatchPlayerDamageMatrix.SourceDetails
	(*CMsgMatchMetaDataContents_Position)(nil),           // 44: CMsgMatchMetaDataContents.Position
	(*CMsgMatchMetaDataContents_Deaths)(nil),             // 45: CMsgMatchMetaDataContents.Deaths
	(*CMsgMatchMetaDataContents_Items)(nil),              // 46: CMsgMatchMetaDataContents.Items
	(*CMsgMatchMetaDataContents_Ping)(nil),               // 47: CMsgMatchMetaDataContents.Ping
	(*CMsgMatchMetaDataContents_GoldSource)(nil),         // 48: CMsgMatchMetaDataContents.GoldSource
	(*CMsgMatchMetaDataContents_CustomUserStatInfo)(nil), // 49: CMsgMatchMetaDataContents.CustomUserStatInfo
	(*CMsgMatchMetaDataContents_CustomUserStat)(nil),     // 50: CMsgMatchMetaDataContents.CustomUserStat
	(*CMsgMatchMetaDataContents_PlayerStats)(nil),        // 51: CMsgMatchMetaDataContents.PlayerStats
	(*CMsgMatchMetaDataContents_AbilityStat)(nil),        // 52: CMsgMatchMetaDataContents.AbilityStat
	(*CMsgMatchMetaDataContents_BookReward)(nil),         // 53: CMsgMatchMetaDataContents.BookReward
	(*CMsgMatchMetaDataContents_Players)(nil),            // 54: CMsgMatchMetaDataContents.Players
	(*CMsgMatchMetaDataContents_Objective)(nil),          // 55: CMsgMatchMetaDataContents.Objective
	(*CMsgMatchMetaDataContents_MidBoss)(nil),            // 56: CMsgMatchMetaDataContents.MidBoss
	(*CMsgMatchMetaDataContents_Pause)(nil),              // 57: CMsgMatchMetaDataContents.Pause
	(*CMsgMatchMetaDataContents_WatchedDeathReplay)(nil), // 58: CMsgMatchMetaDataContents.WatchedDeathReplay
	(*CMsgMatchMetaDataContents_MatchInfo)(nil),          // 59: CMsgMatchMetaDataContents.MatchInfo
	(*gcsdk_gcmessages_go.CExtraMsgBlock)(nil),           // 60: CExtraMsgBlock
	(steammessages_go.EGCPlatform)(0),                    // 61: EGCPlatform
}
var file_citadel_gcmessages_common_proto_depIdxs = []int32{
	2,  // 0: CSOCitadelLobby.match_mode:type_name -> ECitadelMatchMode
	9,  // 1: CSOCitadelLobby.game_mode:type_name -> ECitadelGameMode
	60, // 2: CSOCitadelLobby.extra_messages:type_name -> CExtraMsgBlock
	10, // 3: CSOCitadelLobby.server_state:type_name -> ELobbyServerState
	33, // 4: CLobbyData_PostMatchSurvey.surveys:type_name -> CLobbyData_PostMatchSurvey.PlayerSurvey
	34, // 5: CMsgHeroSelectionMatchInfo.hero_selections:type_name -> CMsgHeroSelectionMatchInfo.Hero
	2,  // 6: CMsgStartFindingMatchInfo.match_mode:type_name -> ECitadelMatchMode
	9,  // 7: CMsgStartFindingMatchInfo.game_mode:type_name -> ECitadelGameMode
	7,  // 8: CMsgStartFindingMatchInfo.bot_difficulty:type_name -> ECitadelBotDifficulty
	8,  // 9: CMsgStartFindingMatchInfo.region_mode:type_name -> ECitadelRegionMode
	35, // 10: CMsgAnyToGCReportAsserts.asserts:type_name -> CMsgAnyToGCReportAsserts.TrackedAssert
	36, // 11: CSOCitadelParty.members:type_name -> CSOCitadelParty.Member
	38, // 12: CSOCitadelParty.invites:type_name -> CSOCitadelParty.Invite
	37, // 13: CSOCitadelParty.left_members:type_name -> CSOCitadelParty.LeftMember
	7,  // 14: CSOCitadelParty.bot_difficulty:type_name -> ECitadelBotDifficulty
	2,  // 15: CSOCitadelParty.match_mode:type_name -> ECitadelMatchMode
	9,  // 16: CSOCitadelParty.game_mode:type_name -> ECitadelGameMode
	13, // 17: CSOCitadelParty.chat_mode:type_name -> CSOCitadelParty.EChatMode
	8,  // 18: CSOCitadelParty.region_mode:type_name -> ECitadelRegionMode
	39, // 19: CMsgMatchPlayerPathsData.paths:type_name -> CMsgMatchPlayerPathsData.Path
	42, // 20: CMsgMatchPlayerDamageMatrix.damage_dealers:type_name -> CMsgMatchPlayerDamageMatrix.DamageDealer
	43, // 21: CMsgMatchPlayerDamageMatrix.source_details:type_name -> CMsgMatchPlayerDamageMatrix.SourceDetails
	59, // 22: CMsgMatchMetaDataContents.match_info:type_name -> CMsgMatchMetaDataContents.MatchInfo
	30, // 23: CMsgAccountStats.stats:type_name -> CMsgAccountHeroStats
	12, // 24: CSOCitadelParty.Member.player_type:type_name -> CSOCitadelParty.EPlayerType
	61, // 25: CSOCitadelParty.Member.platform:type_name -> EGCPlatform
	19, // 26: CSOCitadelParty.Member.hero_roster:type_name -> CMsgHeroSelectionMatchInfo
	12, // 27: CSOCitadelParty.LeftMember.player_type:type_name -> CSOCitadelParty.EPlayerType
	40, // 28: CMsgMatchPlayerDamageMatrix.DamageSource.damage_to_players:type_name -> CMsgMatchPlayerDamageMatrix.DamageToPlayer
	41, // 29: CMsgMatchPlayerDamageMatrix.DamageDealer.damage_sources:type_name -> CMsgMatchPlayerDamageMatrix.DamageSource
	14, // 30: CMsgMatchPlayerDamageMatrix.SourceDetails.stat_type:type_name -> CMsgMatchPlayerDamageMatrix.EStatType
	44, // 31: CMsgMatchMetaDataContents.Deaths.death_pos:type_name -> CMsgMatchMetaDataContents.Position
	44, // 32: CMsgMatchMetaDataContents.Deaths.killer_pos:type_name -> CMsgMatchMetaDataContents.Position
	16, // 33: CMsgMatchMetaDataContents.GoldSource.source:type_name -> CMsgMatchMetaDataContents.EGoldSource
	48, // 34: CMsgMatchMetaDataContents.PlayerStats.gold_sources:type_name -> CMsgMatchMetaDataContents.GoldSource
	50, // 35: CMsgMatchMetaDataContents.PlayerStats.custom_user_stats:type_name -> CMsgMatchMetaDataContents.CustomUserStat
	45, // 36: CMsgMatchMetaDataContents.Players.death_details:type_name -> CMsgMatchMetaDataContents.Deaths
	46, // 37: CMsgMatchMetaDataContents.Players.items:type_name -> CMsgMatchMetaDataContents.Items
	51, // 38: CMsgMatchMetaDataContents.Players.stats:type_name -> CMsgMatchMetaDataContents.PlayerStats
	3,  // 39: CMsgMatchMetaDataContents.Players.team:type_name -> ECitadelLobbyTeam
	47, // 40: CMsgMatchMetaDataContents.Players.pings:type_name -> CMsgMatchMetaDataContents.Ping
	52, // 41: CMsgMatchMetaDataContents.Players.ability_stats:type_name -> CMsgMatchMetaDataContents.AbilityStat
	53, // 42: CMsgMatchMetaDataContents.Players.book_rewards:type_name -> CMsgMatchMetaDataContents.BookReward
	5,  // 43: CMsgMatchMetaDataContents.Objective.legacy_objective_id:type_name -> ECitadelObjective
	6,  // 44: CMsgMatchMetaDataContents.Objective.team_objective_id:type_name -> ECitadelTeamObjective
	3,  // 45: CMsgMatchMetaDataContents.Objective.team:type_name -> ECitadelLobbyTeam
	3,  // 46: CMsgMatchMetaDataContents.MidBoss.team_killed:type_name -> ECitadelLobbyTeam
	3,  // 47: CMsgMatchMetaDataContents.MidBoss.team_claimed:type_name -> ECitadelLobbyTeam
	15, // 48: CMsgMatchMetaDataContents.MatchInfo.match_outcome:type_name -> CMsgMatchMetaDataContents.EMatchOutcome
	3,  // 49: CMsgMatchMetaDataContents.MatchInfo.winning_team:type_name -> ECitadelLobbyTeam
	54, // 50: CMsgMatchMetaDataContents.MatchInfo.players:type_name -> CMsgMatchMetaDataContents.Players
	9,  // 51: CMsgMatchMetaDataContents.MatchInfo.game_mode:type_name -> ECitadelGameMode
	2,  // 52: CMsgMatchMetaDataContents.MatchInfo.match_mode:type_name -> ECitadelMatchMode
	55, // 53: CMsgMatchMetaDataContents.MatchInfo.objectives:type_name -> CMsgMatchMetaDataContents.Objective
	25, // 54: CMsgMatchMetaDataContents.MatchInfo.match_paths:type_name -> CMsgMatchPlayerPathsData
	26, // 55: CMsgMatchMetaDataContents.MatchInfo.damage_matrix:type_name -> CMsgMatchPlayerDamageMatrix
	57, // 56: CMsgMatchMetaDataContents.MatchInfo.match_pauses:type_name -> CMsgMatchMetaDataContents.Pause
	49, // 57: CMsgMatchMetaDataContents.MatchInfo.custom_user_stats:type_name -> CMsgMatchMetaDataContents.CustomUserStatInfo
	58, // 58: CMsgMatchMetaDataContents.MatchInfo.watched_death_replays:type_name -> CMsgMatchMetaDataContents.WatchedDeathReplay
	56, // 59: CMsgMatchMetaDataContents.MatchInfo.mid_boss:type_name -> CMsgMatchMetaDataContents.MidBoss
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_citadel_gcmessages_common_proto_init() }
func file_citadel_gcmessages_common_proto_init() {
	if File_citadel_gcmessages_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_citadel_gcmessages_common_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CSOCitadelLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CLobbyData_PostMatchSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgHeroSelectionMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgStartFindingMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgAnyToGCReportAsserts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgAnyToGCReportAssertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgRegionPingTimesClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CSOCitadelParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchPlayerPathsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchPlayerDamageMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMapLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgAccountHeroStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgAccountBookStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgAccountStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CLobbyData_PostMatchSurvey_PlayerSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgHeroSelectionMatchInfo_Hero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgAnyToGCReportAsserts_TrackedAssert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CSOCitadelParty_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CSOCitadelParty_LeftMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CSOCitadelParty_Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchPlayerPathsData_Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchPlayerDamageMatrix_DamageToPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchPlayerDamageMatrix_DamageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchPlayerDamageMatrix_DamageDealer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchPlayerDamageMatrix_SourceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_Deaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_Items); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_GoldSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_CustomUserStatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_CustomUserStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_AbilityStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_BookReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_Players); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_Objective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_MidBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_Pause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_WatchedDeathReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citadel_gcmessages_common_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*CMsgMatchMetaDataContents_MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_citadel_gcmessages_common_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_citadel_gcmessages_common_proto_goTypes,
		DependencyIndexes: file_citadel_gcmessages_common_proto_depIdxs,
		EnumInfos:         file_citadel_gcmessages_common_proto_enumTypes,
		MessageInfos:      file_citadel_gcmessages_common_proto_msgTypes,
	}.Build()
	File_citadel_gcmessages_common_proto = out.File
	file_citadel_gcmessages_common_proto_rawDesc = nil
	file_citadel_gcmessages_common_proto_goTypes = nil
	file_citadel_gcmessages_common_proto_depIdxs = nil
}
